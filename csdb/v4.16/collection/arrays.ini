[ArrayToStringList]
Desc="Copies the elements of string array Strings to string list SL, replacing any existing contents of SL."
DescEx="<p>Copies the elements of string array <var>Strings</var> to string list <var>SL</var>, replacing any existing contents of <var>SL</var>.</p>"
SeeAlso=StringListToArray
Units=Classes
Snip=533.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ByteArraysEqual]
Desc="Checks if two byte arrays are equal. The arrays are equal if they have the same number of elements and elements at the same position in the array are equal."
DescEx="<p>Checks if two byte arrays are equal.</p><p>The arrays are equal if they have the same number of elements and elements at the same position in the array are equal.</p>"
SeeAlso=ByteArraysSameStart
Snip=365.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ByteArraysSameStart]
Desc="Checks if two byte arrays B1 and B2 are equal for the first Count elements. False is returned if any array has less than Count elements. Count must be >= 1."
DescEx="<p>Checks if two byte arrays <var>B1</var> and <var>B2</var> are equal for the first <var>Count</var> elements.</p><p>False is returned if any array has less than <var>Count</var> elements.</p><p><var>Count</var> must be &gt;= 1.</p>"
SeeAlso=ByteArraysEqual
Snip=481.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IndexOfByte]
Desc="Returns the index of the first occurrence of byte B in byte array A, or -1 if B is not in A."
DescEx="<p>Returns the index of the first occurrence of byte <var>B</var> in byte array <var>A</var>, or -1 if <var>B</var> is not in <var>A</var>.</p>"
SeeAlso=LastIndexOfByte
Snip=482.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[LastIndexOfByte]
Desc="Returns the index of the last occurrence of byte B in byte array A, or -1 if B is not in A."
DescEx="<p>Returns the index of the last occurrence of byte <var>B</var> in byte array <var>A</var>, or -1 if <var>B</var> is not in <var>A</var>.</p>"
SeeAlso=IndexOfByte
Snip=483.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StringListToArray]
Desc="Creates and returns a dynamic string array containing all the strings from the given string list."
SeeAlso=ArrayToStringList
Units=Classes,Types
Snip=347.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

# from arrays.3.ini

[AppendByteArray]
Desc="Appends array of bytes B2 to the end of byte array B1."
DescEx="Appends array of bytes <var>B2</var> to the end of byte array <var>B1</var>."
Depends=TBytes
SeeAlso=ConcatByteArrays
Snip=364.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ChopByteArray]
Desc="Deletes a sequence of bytes from byte array B starting at index Start with length Len. If either Start or Len are less than 0 they are taken as zero. If Start is beyond the end of the array or if Len is 0 then the whole array is returned unchanged. If the sequence of bytes to be chopped extends beyond the end of the array it is truncated from Start."
DescEx="<p>Deletes a sequence of bytes from byte array <var>B</var> starting at index <var>Start</var> with length <var>Len</var>.</p><p>If either <var>Start</var> or <var>Len</var> are less than 0 they are taken as zero. If <var>Start</var> is beyond the end of the array or if <var>Len</var> is 0 then the whole array is returned unchanged. If the sequence of bytes to be chopped extends beyond the end of the array it is truncated from <var>Start</var>.</p>"
Depends=TBytes,ConcatByteArrays,SliceByteArray
SeeAlso=SliceByteArray
Snip=366.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[CloneByteArray]
Desc="Makes a copy of an array of bytes."
Extra="<p>Useful for creating a <var>TBytes</var> array from a constant array or for cloning an existing byte array.</p>"
Depends=TBytes
SeeAlso=AppendByteArray
Snip=367.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ConcatByteArrays]
Desc="Concatenates two byte arrays B1 and B2 and returns the resulting array. The result is the contents of B1 followed by the contents of B2."
DescEx="<p>Concatenates two byte arrays <var>B1</var> and <var>B2</var> and returns the resulting array.</p><p>The result is the contents of <var>B1</var> followed by the contents of <var>B2</var>.</p>"
Depends=TBytes,AppendByteArray,CloneByteArray
SeeAlso=AppendByteArray
Snip=368.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PopByteArray]
Desc="Removes the last element of byte array A and returns the element. The length of A shrinks by one. A must not be empty."
DescEx="<p>Removes the last element of byte array <var>A</var> and returns the element. The length of <var>A</var> shrinks by one.</p><p><var>A</var> must not be empty.</p>"
Depends=TBytes
SeeAlso=PushByteArray,ShiftByteArray,UnShiftByteArray
Snip=484.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PushByteArray]
Desc="Pushes byte B onto the end of byte array A. The length of A grows by one."
DescEx="<p>Pushes byte <var>B</var> onto the end of byte array <var>A</var>. The length of <var>A</var> grows by one.</p>"
Depends=TBytes
SeeAlso=PopByteArray,ShiftByteArray,UnShiftByteArray
Snip=485.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ShiftByteArray]
Desc="Removes the first element of byte array A and returns the element. The length of A shrinks by one. A must not be empty."
DescEx="<p>Removes the first element of byte array <var>A</var> and returns the element. The length of <var>A</var> shrinks by one.</p><p><var>A</var> must not be empty.</p>"
Depends=TBytes
SeeAlso=PopByteArray,PushByteArray,UnShiftByteArray
Snip=486.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SliceByteArray]
Desc="Slices a range of bytes from byte array B, starting at index Start with length Len, and returns the result. If either Start or Len are less than 0, they are taken as 0. If Start is beyond the end of the array or if Len is 0 then an empty array is returned. If the sequence of bytes to be sliced extends beyond the end of the array it is truncated from Start."
DescEx="<p>Slices a range of bytes from byte array <var>B</var>, starting at index <var>Start</var> with length <var>Len</var>, and returns the result.</p><p>If either <var>Start</var> or <var>Len</var> are less than 0, they are taken as 0. If <var>Start</var> is beyond the end of the array or if <var>Len</var> is 0 then an empty array is returned. If the sequence of bytes to be sliced extends beyond the end of the array it is truncated from <var>Start</var>.</p>"
Depends=TBytes
SeeAlso=ChopByteArray
Snip=369.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[UnShiftByteArray]
Desc="Inserts byte B at the beginning of byte array A. The length of A grows by one."
DescEx="<p>Inserts byte <var>B</var> at the beginning of byte array <var>A</var>. The length of <var>A</var> grows by one.</p>"
Depends=TBytes
SeeAlso=PopByteArray,PushByteArray,ShiftByteArray
Snip=487.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

# from arrays.4.ini

[TArrayUtils]
Kind=class
Desc="A method-only advanced record that provides utility methods for working with generic dynamic arrays."
Units=Generics.Defaults
SeeAlso=IndexOfByte,ByteArraysEqual,ByteArraysSameStart
TestInfo=advanced
Snip=623.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=N
Delphi7=N
Delphi2005Win32=N
Delphi2006Win32=Y
Delphi2007=N
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N
