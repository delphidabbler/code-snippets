[CountFiles]
Desc="Returns the number of files in the folder specified by APath that match the DOS style wildcard AWildCard. Any sub-directories of APath and the files they contain are not counted."
DescEx="<p>Returns the number of files in the folder specified by <var>APath</var> that match the DOS style wildcard <var>AWildCard</var>.</p><p>Any sub-directories of <var>APath</var> and the files they contain are not counted.</p>"
Extra="<p>Slightly modified routine from Bill Miller's snippets collection.</p>"
Units=SysUtils
Depends=DirToPath,IsFlagSet,ProcessMessages
Snip=351.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DirPurge]
Desc="Deletes the given directory and all its files and sub-directories. If the directory does not exist then the routine returns immediately."
Units=SysUtils
Snip=563.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ExeType]
Kind=routine
Desc="Checks and returns the type of an executable file. etUnknown is returned if the file is not executable or if its type can't be determined."
DescEx="<p>Checks and returns the type of an executable file.</p><p><var>etUnknown</var> is returned if the file is not executable or if its type can't be determined.</p>"
Extra="<p>This function returns a value from the <var>TExeType</var> enumeration.</p>"
Units=SysUtils,Classes,Windows
Depends=TExeType
Snip=245.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FileInProgramDir]
Desc="Returns the fully specified name of the file FileName in the the same directory as the executing program. Any path information is stripped from FileName."
DescEx="<p>Returns the fully specified name of the file <var>FileName</var> in the the same directory as the executing program.</p><p>Any path information is stripped from <var>FileName</var>.</p>"
Units=SysUtils
Depends=ProgramPath
Snip=564.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GetParentDirectory]
Desc="Returns the parent directory of the provided path."
Extra="<p>Modification of code from Bill Miller's snippets collection.</p> <p>If <var>APath</var> is relative then the returned directory is relative to the current directory.</p>"
Units=SysUtils
Depends=DirToPath
Snip=353.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsDirectory]
Desc="Returns True if given name is a valid directory and False otherwise. DirName can be any file system name (with or without trailing path delimiter)."
DescEx="Returns True if given name is a valid directory and False otherwise. <var>DirName</var> can be any file system name (with or without trailing path delimiter)."
Extra="<p>This routine avoids using <var>DirectoryExists</var> in <mono>FileCtrl</mono> and hence avoids the overhead of using that unit.</p>"
Units=SysUtils
Depends=IsFlagSet
SeeAlso=IsArchiveFile,IsFile,IsHiddenFile,IsReadOnlyFile,IsSystemFile
Snip=007.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsFolderEmpty]
Desc="Determines if a folder is empty. Returns True if so, False otherwise."
Extra="<p>Contributed by Bill Miller, with added error handling.</p> <p><var>AFolder</var> must be a valid directory. It can optionally have a trailing path delimiter.</p>"
Units=SysUtils,Windows
Depends=DirToPath,IsDirectory,PathToDir
SeeAlso=
Snip=272.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsHugeFile]
Desc="Checks if a file is huge, i.e. it is larger than 2Gb."
Extra="<p>Use this function to determine if you can rely upon the <var>SizeOfFile</var> function to test the size of a file or if <var>SizeOfFile64</var> must be used. <var>SizeOfFile</var> can only be used if <var>IsHugeFile</var> returns false.</p>"
Depends=SizeOfFile64
SeeAlso=SizeOfFile,SizeOfFile64
Snip=259.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsReservedDeviceName]
Desc="Checks if a name is a Windows reserved device name."
Extra="<p>List of reserved names taken from the <a href="http://msdn.microsoft.com/en-us/library/aa365247.aspx">File Names, Paths and Namespaces</a> topic on the Microsoft Developer Network.</p> <p><strong>Note:</strong> Microsoft state that you should not use any of these reserved names as the name of a file. They also observe that reserved device names followed by an extension should be avoided, for example <mono>NUL.txt</mono>. To check for this use <var>IsReservedDeviceName(RemoveFileExt(ExtractFileName(FileName)));</var>.</p>"
Units=SysUtils
Snip=261.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ShortToLongFilePath]
Desc="Converts whole of given DOS style 8.3 path to long file path and returns it. If path can't be converted then '' is returned."
Extra="<p>Function can handle UNC paths (<mono>\\server\share\path</mono> format) or local paths (<mono>X:\path format</mono>).</p>"
Units=SysUtils
SeeAlso=LongToShortFilePath
Snip=012.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SizeOfFile]
Desc="Gets the size of a file. Returns $FFFFFFFF if the file doesn't exist or can't be accessed or 2^31 if file is larger than 2Gb."
Extra="<p>For files larger than 2Gb use <var>SizeOfFile64</var>.</p>"
Units=SysUtils,Windows
SeeAlso=SizeOfFile64,SizeOfFile2
Snip=258.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SizeOfFile2]
Desc="Gets the size of a file. Returns 0 if the file doesn't exist or can't be accessed."
Extra="<p>The file must be less that 2Gb in size. For files larger than 2Gb use <var>SizeOfFile64</var>.</p><p>Contributed by Montor.</p>"
Units=SysUtils
SeeAlso=SizeOfFile,SizeOfFile64
Snip=294.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SubDirectoryCount]
; Not placed in file.ini since needs Delphi 2010, which is not supported in CodeSnip v2 or earlier
Desc="Counts all the sub-directories of directory specified by Path. If Recurse is True all sub-directories are counted recursively, otherwise only immediate sub-directories are counted."
DescEx="Counts all the sub-directories of directory specified by <var>Path</var>. If <var>Recurse</var> is True all sub-directories are counted recursively, otherwise only immediate sub-directories are counted."
Extra="<p>Adapted from code contributed by Bill Miller.</p>"
Units=IOUtils,Types
Snip=409.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=N
Delphi7=N
Delphi2005Win32=N
Delphi2006Win32=N
Delphi2007=N
Delphi2009Win32=N
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[TempFileName]
Desc="Returns a unique temporary file name in the user's Temp folder. The file name includes the first three characters of Stub followed by hexadecimal characters. If Create is True then the file is created. Returns an empty string on failure."
DescEx="Returns a unique temporary file name in the user's <mono>Temp</mono> folder. The file name includes the first three characters of <var>Stub</var> followed by hexadecimal characters. If <var>Create</var> is True then the file is created. Returns an empty string on failure."
Extra="<p><strong>Note:</strong> Even if <var>ACreate</var> is false the file will be created momentarily. This means that <var>APath</var> must exist and the current user must have write access to the path or the routine will fail.</p>"
Units=Windows,SysUtils
SeeAlso=TempFolder,TempFileNameEx
Snip=044.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TempFileNameEx]
Desc="Returns a unique temporary file name in the directory specified in APath. The file name includes the first three characters of AStub followed by hexadecimal characters. If ACreate is True then the file is created. Returns an empty string on failure."
DescEx="Returns a unique temporary file name in the directory specified in <var>APath</var>. The file name includes the first three characters of <var>AStub</var> followed by hexadecimal characters. If <var>ACreate</var> is True then the file is created. Returns an empty string on failure."
Extra="<p><strong>Note:</strong> Even if <var>ACreate</var> is false the file will be created momentarily. This means that <var>APath</var> must exist and the current user must have write access to the path or the routine will fail.</p><p>From Bill Miller's snippets collection.</p>"
Units=Windows,SysUtils
SeeAlso=TempFileName
Snip=471.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TExeType]
Kind=type
Desc="Enumeration that describes various types of executable file."
Extra="<p><var>TExeType</var> is the return type of the <var>ExeType</var> function.</p>"
SeeAlso=ExeType
Snip=244.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
