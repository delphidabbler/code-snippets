## Graphics routines ##

[AdjustBitmapBrightness]
Desc="Changes the brightness of bitmap Bmp by a given Delta value in range -255..+255."
DescEx="Changes the brightness of bitmap <var>Bmp</var> by a given <var>Delta</var> value in range -255..+255."
Extra="<p>Based on code found on EFG's Delphi Reference Library's <a href="http://www.efg2.com/Lab/Library/Delphi/Graphics/ImageProcessing.htm">Image Processing Page</a>.</p> <p><strong>Note from EFG:</strong> Normally a <var>pf24bit</var> bitmap scanline would be accessed as a type <mono>TRGBTripleArray = array[Word] of TRGBTriple</mono>, but since we can treat the three color components (<var>rgbtRed</var>, <var>rgbtGreen</var>, <var>rgbtBlue</var>) in exactly the same way, we can access the scanline as a <var>pByteArray</var> of <mono>3 * Bitmap.Width</mono> bytes.</p>"
Units=SysUtils,Graphics
SeeAlso=AdjustColorBrightness
Snip=335.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[AdjustImage_A]
DisplayName="AdjustImage (TCanvas overload)"
Desc="Adjusts the area defined by Rect of the image displayed on SrcCvs, storing the resulting image on DestCvs. Any one or more of the brightness, contrast, tint, saturation and gamma values of the image can be adjusted. The image may also be inverted (negated). Returns True if the adjustment succeeds, False if it fails."
DescEx="<p>Adjusts the area defined by <var>Rect</var> of the image displayed on <var>SrcCvs</var>, storing the resulting image on <var>DestCvs</var>.</p><p>Any one or more of the brightness, contrast, tint, saturation and gamma values of the image can be adjusted. The image may also be inverted (negated).</p><p>Returns True if the adjustment succeeds, False if it fails.</p>"
Extra="<p>Adapted from a routine contributed by Montor.</p><p>To ensure any one of the <var>Brightness</var>, <var>Contrast</var>, <var>Tint</var>, <var>Saturation</var> or <var>Gamma</var> parameter values has no effect on the adjusted image pass the appropriate <var>AINulBrightness</var>, <var>AINulContrast</var>, <var>AINulTint</var>, <var>AINulSaturation</var> or <var>AINulGamma</var> constant as the parameter value.</p>"
Units=Windows,Graphics,Types
Depends=AdjustImageConsts,AdjustImageTypes
SeeAlso=AdjustImageConsts,AdjustImageTypes,AdjustImage_B,AdjustImage_C
Snip=388.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[AdjustImage_B]
DisplayName="AdjustImage (TBitmap overload 1)"
Desc="Adjusts the image contained in bitmap SrcBmp and stores the resulting image in bitmap DestBmp. Any one or more of the brightness, contrast, tint, saturation and gamma values of the bitmap's image can be adjusted. The image may also be inverted (negated). Returns True if the adjustment succeeds, False if it fails."
DescEx="<p>Adjusts the image contained in bitmap <var>SrcBmp</var> and stores the resulting image in bitmap <var>DestBmp</var>.</p><p>Any one or more of the brightness, contrast, tint, saturation and gamma values of the bitmap's image can be adjusted. The image may also be inverted (negated).</p><p>Returns True if the adjustment succeeds, False if it fails.</p>"
Extra="<p>To ensure any one of the <var>Brightness</var>, <var>Contrast</var>, <var>Tint</var>, <var>Saturation</var> or <var>Gamma</var> parameter values has no effect on the adjusted image pass the appropriate <var>AINulBrightness</var>, <var>AINulContrast</var>, <var>AINulTint</var>, <var>AINulSaturation</var> or <var>AINulGamma</var> constant as the parameter value.</p>"
Units=Graphics
Depends=AdjustImageConsts,AdjustImageTypes,AdjustImage_A
SeeAlso=AdjustImageConsts,AdjustImageTypes,AdjustImage_A,AdjustImage_C
Snip=389.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[AdjustImage_C]
DisplayName="AdjustImage (TBitmap overload 2)"
Desc="Adjusts the image contained in the given bitmap, updating it in place. Any one or more of the brightness, contrast, tint, saturation and gamma values of the bitmap's image can be adjusted. The image may also be inverted (negated). Returns True if the adjustment succeeds, False if it fails."
DescEx="<p>Adjusts the image contained in the given bitmap, updating it in place.</p><p>Any one or more of the brightness, contrast, tint, saturation and gamma values of the bitmap's image can be adjusted. The image may also be inverted (negated).</p><p>Returns True if the adjustment succeeds, False if it fails.</p>"
Extra="<p>To ensure any one of the <var>Brightness</var>, <var>Contrast</var>, <var>Tint</var>, <var>Saturation</var> or <var>Gamma</var> parameter values has no effect on the adjusted image pass the appropriate <var>AINulBrightness</var>, <var>AINulContrast</var>, <var>AINulTint</var>, <var>AINulSaturation</var> or <var>AINulGamma</var> constant as the parameter value.</p>"
Units=Graphics
Depends=AdjustImageConsts,AdjustImageTypes,AdjustImage_A
SeeAlso=AdjustImageConsts,AdjustImageTypes,AdjustImage_A,AdjustImage_B
Snip=390.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ColorToHSB]
Desc="Converts the given TColor value to a THSBColor value, which is returned."
DescEx="Converts the given <var>TColor</var> value to a <var>THSBColor</var> value, which is returned."
Extra="<p>System colours are converted to their actual values before conversion.</p>"
Units=Graphics
Depends=THSBColor,ColorToRGBTriple,RGBToHSB
SeeAlso=RGBToHSB
Snip=288.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CountColors]
Desc="Counts and returns the number of unique RGB triples in the given TBitmap object. The bitmap must be in pf24Bit format."
DescEx="<p>Counts and returns the number of unique RGB triples in the given <var>TBitmap</var> object.</p><p>The bitmap must be in <var>pf24Bit</var> format.</p>"
Extra="<p>Uses a 2D array of <var>TBits</var> objects - when a (red, green) combination occurs for the first time, it creates a 256-bit array of bits in blue dimension. So, overall this is a fairly sparse matrix for most images.</p><p>From EFG's Delphi Reference Library's <a href="http://www.efg2.com/Lab/Library/Delphi/Graphics/Color.htm">Delphi Graphic Color Algorithms Page</a>.</p><p>EFG tested with pictures created with a known number of colours, including a specially constructed image with 1024 &#215; 1024 = 1,048,576 colours.</p>"
Units=Classes,Graphics
Depends=RGBTripleArray
Snip=452.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CreateDisplayDC]
Desc="Creates and returns a display device context."
Extra="<p>The device context must be deleted using Windows' <var>DeleteDC</var> function.</p>"
Units=Windows
Snip=147.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DarkenColor]
Desc="Darkens the given colour by the given percentage and returns the resulting colour."
Extra="<p>Darkening a colour by 0% does not change it. Darkening by 100% or more makes the colour black.</p><p>System colours are converted to the actual colour they represent before darkening.</p><p>Inspired by code contributed by Topellina.</p>"
Units=Windows,Graphics
Depends=Clamp,ExtractRGB
SeeAlso=LightenColor
Snip=401.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GetBMPSize]
Desc="Gets the dimensions of a bitmap image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p>"
Units=Types,SysUtils,Classes,Windows
SeeAlso=GetGIFSize,GetJPGSize,GetPNGSize
Snip=223.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GetGIFSize]
Desc="Gets the dimensions of a GIF image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p> <p>Adapted from code submitted by Bill Miller.</p>"
Units=Types,SysUtils,Classes
SeeAlso=GetBMPSize,GetJPGSize,GetPNGSize
Snip=222.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GetIconHotspot]
Desc="Gets position of the given icon's hotspot."
Extra="<p>This routine is particularly useful if the icon represents a cursor. This is done by assigning a cursor's handle the icon's <var>Handle property</var>.</p>"
Units=Graphics,Windows,SysUtils
SeeAlso=IsCursorIcon,IsColorIcon,GetIconANDBitmask,GetIconXORBitmask
Snip=113.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GetJPGSize]
Desc="Gets the dimensions of a JPEG image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p> <p>Adapted from code submitted by Bill Miller.</p>"
Units=Types,SysUtils,Classes
Depends=ReadBigEndianWord
SeeAlso=GetBMPSize,GetGIFSize,GetPNGSize
Snip=220.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GetPNGSize]
Desc="Gets the dimensions of a PNG image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p> <p>Adapted from code submitted by Bill Miller.</p>"
Units=Types,SysUtils,Classes
Depends=ReadBigEndianWord
SeeAlso=GetBMPSize,GetGIFSize,GetJPGSize
Snip=221.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GreyScale_A]
DisplayName="GreyScale (inplace overload)"
Desc="Converts a colour bitmap to greyscale. A colour bitmap is passed to the Bmp parameter which is then converted to greyscale in place. The method used to perform the conversion is specified in the Method parameter."
DescEx="<p>Converts a colour bitmap to greyscale.</p><p>A colour bitmap is passed to the <var>Bmp</var> parameter which is then converted to greyscale in place.</p><p>Different conversion methods are supported. The chosen method is specified by passing a value from the <var>TGreyScaleMethod</var> enumeration to the <var>Method</var> parameter.</p>"
Extra="<p>See the documentation of the <var>TGreyScaleMethod</var> code snippet for details of the available conversion methods.</p>"
Units=Windows,Graphics,Math
Depends=CloneGraphicAsBitmap,TGreyScaleMethod
SeeAlso=GreyScale_B,MakeGreyScale,TGreyScaleMethod
Snip=446.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GreyScale_B]
DisplayName="GreyScale (copy overload)"
Desc="Converts a colour bitmap to greyscale. A colour bitmap passed to SrcBmp is converted to greyscale and the result is assigned to DestBmp. The method used to perform the conversion is specified in the Method parameter."
DescEx="<p>Converts a colour bitmap to greyscale.</p><p>A colour bitmap passed to <var>SrcBmp</var> is converted to greyscale and the result is assigned to <var>DestBmp</var>.</p><p>Different conversion methods are supported. The chosen method is specified by passing a value from the <var>TGreyScaleMethod</var> enumeration to the <var>Method</var> parameter.</p>"
Extra="<p>See the documentation of the <var>TGreyScaleMethod</var> code snippet for details of the available conversion methods.</p>"
Units=Graphics
Depends=GreyScale_A,TGreyScaleMethod
SeeAlso=GreyScale_A,MakeGreyScale,TGreyScaleMethod
Snip=447.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[HalftoneStretch_A]
DisplayName="HalftoneStretch (TCanvas overload)"
Desc="Performs a high quality stretch copy operation from canvas SrcCvs to DestCvs. The image occupying the area defined by SrcRect on SrcCvs is stretched to fill the area defined by DestRect on DestCvs."
DescEx="<p>Performs a high quality stretch copy operation from canvas <var>SrcCvs</var> to <var>DestCvs</var>.</p><p>The image occupying the area defined by <var>SrcRect</var> on <var>SrcCvs</var> is stretched to fill the area defined by <var>DestRect</var> on <var>DestCvs</var>.</p>"
Credits="Modified from code contributed by Montor."
Units=Windows,Graphics,Types
SeeAlso=HalftoneStretch_B
Snip=379.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[HalftoneStretch_B]
DisplayName="HalftoneStretch (TBitmap overload)"
Desc="Performs a high quality stretch copy of bitmap SrcBmp to bitmap DestBmp. The image is stretched to completely fill DestBmp."
DescEx="<p>Performs a high quality stretch copy of bitmap <var>SrcBmp</var> to bitmap <var>DestBmp</var>.</p><p>The image is stretched to completely fill <var>DestBmp</var>.</p>"
Units=Graphics,Types
Depends=HalftoneStretch_A
SeeAlso=HalftoneStretch_A
Snip=380.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[InvertBitmap_A]
DisplayName="InvertBitmap (inplace overload)"
Desc="Inverts the colours of bitmap ABitmap. ABitmap is updated in place. It is also converted to 24 bit pixel format if necessary."
DescEx="<p>Inverts the colours of bitmap <var>ABitmap</var>.</p><p><var>ABitmap</var> is updated in place. It is also converted to 24 bit pixel format if necessary.</p>"
Extra="<p>Modified from code contributed by Michael Rockett.</p>"
Units=SysUtils,Graphics
SeeAlso=InvertBitmap_B,AdjustImage_A,AdjustImage_B,AdjustImage_C
Snip=448.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[InvertBitmap_B]
DisplayName="InvertBitmap (copy overload)"
Desc="Inverts the colours of bitmap SrcBmp and stores the result in DestBmp. SrcBmp is not changed. DestBmp will be in 24 bit pixel format."
DescEx="<p>Inverts the colours of bitmap <var>SrcBmp</var> and stores the result in <var>DestBmp</var>.</p><p><var>SrcBmp</var> is not changed. <var>DestBmp</var> will be in 24 bit pixel format.</p>"
Units=Graphics
Depends=InvertBitmap_A
SeeAlso=InvertBitmap_A,AdjustImage_A,AdjustImage_B,AdjustImage_C
Snip=449.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsCursorIcon]
Desc="Checks if an icon represents a cursor. Returns True if icon represents a cursor or False if icon is a standard icon."
Extra="<p>To create an icon that represent a cursor, store the cursor's handle in the icon's <var>Handle</var> property.</p>"
Units=Graphics,Windows,SysUtils
SeeAlso=IsColorIcon,GetIconHotspot,GetIconANDBitmask,GetIconXORBitmask
Snip=114.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsTrueTypeFont_A]
DisplayName="IsTrueTypeFont (TFont overload)"
Desc="Checks if a font is a true type font."
Units=Windows,Graphics
Depends=CreateDisplayDC,IsFlagSet
SeeAlso=IsTrueTypeFont_B
Snip=341.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsTrueTypeFont_B]
DisplayName="IsTrueTypeFont (string overload)"
Desc="Checks if a named font is a true type font."
Units=Graphics
Depends=IsTrueTypeFont_A
SeeAlso=IsTrueTypeFont_A
Snip=342.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[JPEGPixelFormatToPixelFormat]
Desc="Converts and returns the given TJPEGPixelFormat format value to the equivalent TPixelFormat value."
DescEx="<p>Converts and returns the given <var>TJPEGPixelFormat</var> format value to the equivalent <var>TPixelFormat</var> value.</p>"
Extra="<p>Slightly modified from code contributed by Bill Miller.</p>"
Units=SysUtils,Graphics,JPEG
Snip=620.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[LightenColor]
Desc="System colours are converted to their actual values before conversion."
Extra="<p>Lightening a colour by 0% does not change it. Lightening by 100% or more makes the colour white.</p><p>System colours are converted to the actual colour they represent before lightening.</p><p>Inspired by code contributed by both Topellina and Michael Rockett.</p>"
Units=Windows,Graphics
Depends=Clamp,ExtractRGB
SeeAlso=DarkenColor
Snip=402.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[RGBToHSB]
Desc="Converts an RGB colour to the equivalent HSV (HSB) colour."
Extra="<p>Adapted from code presented in <a href="http://delphi.about.com/od/adptips2006/qt/RgbToHsb.htm">this article</a> on About.com.</p>"
Units=Windows,Math
Depends=THSBColor
SeeAlso=ColorToHSB
Snip=287.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RichEditToCanvas]
Desc="Renders the content of the given rich edit control onto the given canvas. APixelsPerInch must be set to the number of pixels per inch of the rich edit control's parent form."
DescEx="<p>Renders the content of the given rich edit control onto the given canvas.</p><p><var>APixelsPerInch</var> must be set to the number of pixels per inch of the rich edit control's parent form.</p>"
Extra="<p>The content of the rich edit control is word wrapped within the width of the canvas' clipping rectangle and is truncated at its bottom.</p><p>Example of usage: <mono>RichEditToCanvas(RichEdit1, Image1.Canvas, Self.PixelsPerInch);</mono></p><p>Contributed by Bill Miller.</p>"
Units=Classes,Windows,Graphics,RichEdit,ComCtrls
Snip=289.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ScaleBitmap_A]
DisplayName="ScaleBitmap (copy overload)"
Desc="Performs a high quality scaling of bitmap ASrcBmp and copies the result into ADestBmp. The required scale factor is given by AScaling."
DescEx="Performs a high quality scaling of bitmap <var>ASrcBmp</var> and copies the result into <var>ADestBmp</var>. The required scale factor is given by <var>AScaling</var>."
Extra="<p>Modified from code contributed by Montor.</p>"
Units=Graphics,Types
Depends=ScaleRect,RectWidth,RectHeight,HalftoneStretch_A
SeeAlso=ScaleBitmap_B
Snip=384.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ScaleBitmap_B]
DisplayName="ScaleBitmap (inplace overload)"
Desc="Performs a high quality scaling of the given bitmap by scale factor AScaling. The bitmap is modified in place."
DescEx="Performs a high quality scaling of the given bitmap by scale factor <var>AScaling</var>. The bitmap is modified in place."
Extra="<p>Slightly modified from code contributed by Montor.</p>"
Units=Graphics
Depends=ScaleBitmap_A
SeeAlso=ScaleBitmap_A
Snip=385.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

## Graphics types ##

[AdjustImageTypes]
Kind=type
DisplayName="AdjustImage Types"
Desc="Types for use with the AdjustImage overloaded functions. The types define valid ranges of values for various function parameters."
DescEx="<p>Types for use with the <var>AdjustImage</var> overloaded functions.</p><p>The types define valid ranges of values for various function parameters.</p>"
SeeAlso=AdjustImage_A,AdjustImage_B,AdjustImage_C,AdjustImageConsts
Snip=386.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RGBQuadArray]
Kind=type
Desc="A 256 element array of RGB quad values."
Extra="<p>Useful when working with 32 bit bitmap scanlines.</p><p>A similar type is used in the implementation of the Delphi <var>Graphics</var> unit, but is not exposed in the unit interface.</p>"
Units=Windows
SeeAlso=RGBTripleArray
Snip=451.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RGBTripleArray]
Kind=type
Desc="A 256 element array of RGB triple values."
Extra="<p>Useful when working with 24 bit bitmap scanlines.</p><p>A similar type is used in the implementation of the Delphi <var>Graphics</var> unit, but is not exposed in the unit interface.</p>"
Units=Windows
SeeAlso=RGBQuadArray
Snip=450.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TColorRec]
Kind=type
Desc="Cracker record that provides several different views of a TColor value and allows it to be assembled from its constituent parts."
DescEx="Cracker record that provides several different views of a <var>TColor</var> value and allows it to be assembled from its constituent parts."
Extra="<p>Contributed by Montor.</p> <p><strong>Note:</strong> Care needs to be taken when using <var>SysFlag</var> to detect a system colour, because <var>SysFlag</var> will be equal to $FF if a normal colour has an alpha transparency of $FF.</p>"
Snip=375.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TGreyScaleMethod]
Kind=type
Desc="Enumeration of possible methods used when coverting a bitmap to greyscale."
Extra="<p>Used in parameter lists of <var>GreyScale</var> overloaded routines.</p> <p>Names based on the <em>Lightness</em>, <em>Average</em> and <em>Luminosity</em> algorithms presented in <a href="http://www.johndcook.com/blog/2009/08/24/algorithms-convert-color-grayscale/">The Endeavour</a> blog.</p>"
SeeAlso=GreyScale_A,GreyScale_B
Snip=445.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[THSBColor]
Kind=type
Desc="Record storing Hue, Saturation and Brightness colour space values."
SeeAlso=RGBToHSB,ColorToHSB
Snip=286.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

## Graphics constants ##

[AdjustImageConsts]
Kind=const
DisplayName="AdjustImage Constants"
Desc="Constants used to pass default values to the AdjustImage overloaded functions. Using these constants for the related function parameters means that the parameter will have no effect on the adjusted image."
DescEx="<p>Constants used to pass default values to the <var>AdjustImage</var> overloaded functions.</p><p>Using these constants for the related function parameters means that the parameter will have no effect on the adjusted image.</p>"
SeeAlso=AdjustImage_A,AdjustImage_B,AdjustImage_C,AdjustImageTypes
Snip=387.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
