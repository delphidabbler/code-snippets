[AdjustColorBrightness]
DescEx="Adjusts the brightness of colour <var>Color</var> by a specified <var>Delta</var> in range -255..255."
Credits="Based on code found on the former EFG's Delphi Reference Library."
Units=Windows,Graphics
SeeAlso=AdjustBitmapBrightness
Snip=290.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[BitmapToMetafile]
DescEx="Converts a bitmap into an extended meta file object. Metafile <var>EMF</var> is updated to contain a copy of bitmap <var>Bmp</var>."
Units=Graphics
SeeAlso=GraphicToBitmap
Snip=178.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CloneCursorAsBitmap]
DescEx="<p>Creates and returns a bitmap object that contains a copy of the given cursor.</p><p>The bitmap has the pixel format specified by <var>PixelFmt</var>. If <var>PixelFmt</var> is <var>pfCustom</var>, then the default format is used.</p><p> <var>TransparentColor</var> specifies the colour in the cursor that is to be drawn as transparent in the bitmap. <var>TransparentColor</var> has no effect if it is <var>clNone</var>.</p>"
Comments="NOTE: The caller is responsible for freeing the bitmap created by this function."
Extra="<strong>Note:</strong> The caller is responsible for freeing the bitmap created by this function."
Units=Controls,Graphics,Forms
Depends=CloneCursorHandleAsBitmap
SeeAlso=CloneCursorHandleAsBitmap,CloneCursorAsBitmap,CloneCursorAsIcon,CloneCursorHandleAsIcon,CursorHandleToBitmap,CursorToBitmap
Snip=281.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CloneCursorAsIcon]
Desc="Creates and returns an icon object that contains a copy of the given cursor."
Comments="NOTE: The caller is responsible for freeing the icon created by this function."
Extra="<strong>Note:</strong> The caller is responsible for freeing the icon created by this function."
Units=Controls,Graphics,Forms
Depends=CloneCursorHandleAsIcon
SeeAlso=CloneCursorAsBitmap,CloneCursorHandleAsBitmap,CloneCursorHandleAsIcon,CursorHandleToBitmap,CursorToBitmap
Snip=275.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CloneCursorHandleAsBitmap]
DescEx="<p>Creates and returns a bitmap object that contains a copy of the cursor whose handle is given by <var>Handle</var>.</p><p>The bitmap has the pixel format specified by <var>PixelFmt</var>. If <var>PixelFmt</var> is <var>pfCustom</var>, then the default format is used.</p><p><var>TransparentColor</var> specifies the colour in the cursor that is to be drawn as transparent in the bitmap. <var>TransparentColor</var> has no effect if it is <var>clNone</var>.</p>"
Comments="NOTE: The caller is responsible for freeing the bitmap created by this function."
Extra="<strong>Note:</strong> The caller is responsible for freeing the bitmap created by this function."
Units=Windows,Graphics
Depends=CloneGraphicAsBitmap
SeeAlso=CloneCursorAsBitmap,CloneCursorAsIcon,CloneCursorHandleAsIcon,CursorHandleToBitmap,CursorToBitmap
Snip=276.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CloneCursorHandleAsIcon]
Desc="Creates and returns an icon object that contains a copy of the cursor with the given handle."
Comments="NOTE: The caller is responsible for freeing the icon created by this function."
Extra="<strong>Note:</strong> The caller is responsible for freeing the icon created by this function."
Units=Windows,Graphics
SeeAlso=CloneCursorAsBitmap,CloneCursorAsIcon,CloneCursorHandleAsBitmap,CursorHandleToBitmap,CursorToBitmap
Snip=274.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CloneGraphicAsBitmap]
DescEx="<p>Creates and returns a bitmap object that contains a copy of given graphic object <var>Src</var>.</p><p>The bitmap has the pixel format specified by <var>PixelFmt</var>. If <var>PixelFmt</var> is <var>pfCustom</var>, then the default format is used, unless <var>Src</var> is a bitmap when its own format is used.</p><p>If <var>Src</var> is transparent then the bitmap is set to transparent and <var>TransparentColor</var> is used as the bitmap's transparent colour. <var>TransparentColor</var> is ignored if it is <var>clNone</var> or if <var>Src</var> is not transparent.</p>"
Comments="NOTE: The caller is responsible for freeing the bitmap created by this function."
Extra="<strong>Note:</strong> The caller is responsible for freeing the bitmap created by this function."
Units=Graphics
Depends=GraphicToBitmap
SeeAlso=GraphicToBitmap,CloneJPEGAsBitmap
Snip=110.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CloneJPEGAsBitmap]
Desc="Creates and returns a bitmap object that contains a copy of the given JPEG image."
Comments="NOTE: The caller is responsible for freeing the bitmap created by this function."
Extra="<strong>Note:</strong> The caller is responsible for freeing the bitmap created by this function."
Units=Graphics,JPEG
SeeAlso=JPEGFileToBitmapFile,CloneGraphicAsBitmap
Snip=279.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ColorToRGBTriple]
DescEx="Converts the given <var>TColor</var> value into an RGB triple value, which is returned."
Comments="System colours are converted to their actual values before conversion."
Units=Windows,Graphics
Depends=ExtractRGB
SeeAlso=RGBTripleToColor,ExtractRGB
Snip=097.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ContrastingColor]
Desc="Returns a colour that contrasts well with a given background colour. The returned colour is either black or white."
Comments="System colours are converted into actual colours before the foreground colour is calculated."
Credits="Adapted from code by Andreas Filsinger."
Units=Windows,Graphics
Depends=ColorToRGBTriple
Snip=453.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CursorHandleToBitmap]
DescEx="<p>Copies a cursor, whose handle is given by <var>Handle</var>, to bitmap <var>Bmp</var>.</p><p><var>Bmp</var> is set to the same size as the cursor.</p><p>If the cursor is transparent then <var>Bmp</var> is set to transparent and <var>TransparentColor</var> specifies the colour in the cursor that is to be drawn as transparent in <var>Bmp</var>. <var>TransparentColor</var> has no effect if it is <var>clNone</var>.</p>"
Units=Windows,Graphics
Depends=GraphicToBitmap
SeeAlso=CloneCursorAsIcon,CloneCursorAsBitmap,CloneCursorHandleAsBitmap,CloneCursorHandleAsIcon,CursorToBitmap
Snip=277.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CursorToBitmap]
DescEx="<p>Copies the given cursor to the given bitmap.</p><p>The bitmap is set to the same size as the cursor.</p><p>If the cursor is transparent then the bitmap is set to transparent and <var>TransparentColor</var> specifies the colour in the cursor that is to be drawn as transparent in the bitmap. <var>TransparentColor</var> has no effect if it is <var>clNone</var>.</p>"
Units=Controls,Graphics,Forms
Depends=CursorHandleToBitmap
SeeAlso=CloneCursorAsIcon,CloneCursorAsBitmap,CloneCursorHandleAsBitmap,CloneCursorHandleAsIcon,CursorHandleToBitmap
Snip=278.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[DrawAngledText]
DescEx="<p>Draws angled text on a canvas at position <var>X</var>,<var>Y</var>.</p><p>The value of <var>Angle</var> is specified in degrees and is accurate to one tenth of a degree.</p>"
Comments="The canvas' current font must be a vector font otherwise the text is not angled."
Units=Windows,Graphics
SeeAlso=DrawDisabledText,DrawTextOutline
Snip=150.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[DrawDisabledText]
DescEx="<p>Draws disabled text on the given canvas at a position <var>X</var>,<var>Y</var>.</p><p>When <var>AllowAccelChars</var> is True, accelerator (&amp;) characters cause the following character to be underlined.</p>"
Units=Windows,Graphics
SeeAlso=DrawAngledText,DrawTextOutline
Snip=149.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[DrawTextOutline]
DescEx="<p>Draws the given text in outline on a the given canvas. The top left corner of the text is specified by the <var>X</var> and <var>Y</var> parameters.</p><p>The canvas' current brush and pen colours are used to fill and outline the text respectively.</p>"
Comments="The canvas' current font must be a vector font otherwise nothing will be displayed."
Units=Windows,Graphics
SeeAlso=DrawAngledText,DrawDisabledText
Snip=099.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[EllipsifyText]
DescEx="<p>Shortens the given text if necessary to fit within <var>MaxWidth</var> pixels on the given canvas.</p><p>If <var>AsPath</var> is True the text is shortened path-wise by inserting an ellipsis in the text body, otherwise it is trunctated and an ellipsis is appended.</p>"
Credits=Provided by Bill Miller.
Units=Graphics,SysUtils,Classes,Windows
Snip=161.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ExtractRGB]
DescEx="Extracts constituent RGB values from the given colour and returns them via the <var>Red</var>, <var>Green</var> and <var>Blue</var> parameters."
Comments="System colours are converted to their actual values before extracting the RGB values."
Units=Graphics,Windows
SeeAlso=ColorToRGBTriple
Snip=112.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[FontExists]
Desc="Checks if a named font exists on the sytem."
Units=Forms
Snip=340.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GetIconANDBitmask]
DescEx="Copies the given icon's <em>AND</em> bitmask to bitmap <var>Mask</var>."
Units=Graphics,Windows,SysUtils
SeeAlso=IsCursorIcon,IsColorIcon,GetIconHotspot,GetIconXORBitmask
Snip=116.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GetIconXORBitmask]
DescEx="Copies the given icon's <em>XOR</em> bitmask to bitmap <var>Mask</var>."
Units=Graphics,Windows,SysUtils,Classes
SeeAlso=IsCursorIcon,IsColorIcon,GetIconHotspot,GetIconANDBitmask
Snip=117.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GraphicToBitmap]
DescEx="<p>Copies graphic object <var>Src</var> to bitmap <var>Dest</var>, which is set to the same size as <var>Src</var>.</p><p>If <var>Src</var> is transparent then <var>Dest</var> is made transparent and <var>TransparentColor</var> is used as the bitmap's transparent colour. <var>TransparentColor</var> is ignored if it is <var>clNone</var> or if <var>Src</var> is not transparent.</p>"
Units=Classes,Graphics
SeeAlso=CloneGraphicAsBitmap
Snip=109.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IndexOfWidestString]
Desc="Returns index of longest string in a string list when rendered in a given font. Returns -1 if string list is empty."
Units=Classes,Graphics,Windows
Depends=CreateDisplayDC
SeeAlso=MaxWidthOfStrings,StringExtent
Snip=173.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsColorIcon]
Desc="Checks if given icon is colour or monochrome. Returns True if icon is in colour, False if monochrome."
Units=Graphics,Windows,SysUtils
SeeAlso=IsCursorIcon,GetIconHotspot,GetIconANDBitmask,GetIconXORBitmask
Snip=115.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsEqualRGBTriple]
Desc="Checks if two RGB triple values are the same."
Units=Windows
SeeAlso=ColorToRGBTriple,RGBTripleToColor
Snip=111.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsGDIPlusInstalled]
Desc="Checks if the GDI+ library is installed."
Depends=IsLibraryInstalled
Snip=119.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[JPEGFileToBitmapFile]
DescEx="<p>Converts a named JPEG file into a bitmap and saves it to a named bitmap file.</p><p>If the bitmap file name is not supplied, or is the same as the JPEG file name, then the bitmap file name is the same as the JPEG file name with its extension changed to .bmp.</p>"
Units=SysUtils,Graphics,JPEG
SeeAlso=CloneJPEGAsBitmap
Snip=280.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[MakeGreyScale]
DescEx="<p>Converts colour bitmap <var>SrcBmp</var> into a 24bit greyscale bitmap. <var>SrcBmp</var> is updated in place.</p><p>Setting the <var>Advanced</var> flag to True uses a more advanced algorithm for the conversion. When the flag is False red, blue and green values are simply averaged.</p>"
Credits="Adapted from original code by Lucas Martín."
Units=SysUtils,Windows,Graphics
Depends=CloneGraphicAsBitmap
Snip=098.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[MaxWidthOfStrings]
Desc="Returns width of longest string in a string list when rendered in a given font."
Credits="Closely based code by Peter Below published by the Delphi Pool."
Units=Classes,Graphics,Windows
Depends=CreateDisplayDC
SeeAlso=IndexOfWidestString,StringExtent
Snip=174.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[RGBTripleToColor]
DescEx="Converts an RGB triple value into a <var>TColor</var> value."
Units=Windows,Graphics
SeeAlso=ColorToRGBTriple
Snip=096.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[SetDefaultFont]
DescEx="Sets the given <var>TFont</var> object to the default GUI font for the operating system."
Credits="From Bill Miller's snippets collection."
Units=Windows,Graphics
SeeAlso=SetDesktopIconFont
Snip=343.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[SetDesktopIconFont]
DescEx="<p>Sets the given <var>TFont</var> object to the font used for desktop icons on the operating system.</p><p>If the required font is not supported by the OS then the system default GUI font is used instead.</p>"
Cedits="Adapted from code from Bill Miller's code snippets collection."
Units=Windows,Graphics
Depends=SetDefaultFont
SeeAlso=SetDefaultFont
Snip=344.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[SetVistaContentFont]
DescEx="<p>Sets the given <var>TFont</var> object to the Vista content font and adjusts the font's size accordingly.</p><p>Does nothing if (1) the operating system is not at least Vista, (2) the Vista content font is not available or (3) the font is already the required font.</p>"
Units=SysUtils,Graphics
Depends=FontExists
SeeAlso=SetVistaFont
Snip=346.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[SetVistaFont]
DescEx="<p>Sets the given <var>TFont</var> object to the Vista default font and adjusts the font's size accordingly.</p><p>Does nothing if (1) the operating system is not at least Vista, (2) default Vista font is not available or (3) the font is already the Vista default font.</p>"
Units=SysUtils,Graphics
Depends=FontExists
SeeAlso=SetVistaContentFont
Snip=345.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[StringExtent]
Desc="Returns the width and height of the given string when rendered in the specified font."
Credits="Inspired by code by Peter Below published by the Delphi Pool."
Units=Windows,Graphics
Depends=CreateDisplayDC
Snip=148.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

# from graphics.3.ini

## Graphics routines ##

[AdjustBitmapBrightness]
DescEx="Changes the brightness of bitmap <var>Bmp</var> by a given <var>Delta</var> value in range -255..+255."
Extra="<p>Based on code found on the former EFG's Delphi Reference Library.</p> <p><strong>Note from EFG:</strong> Normally a <var>pf24bit</var> bitmap scanline would be accessed as a type <mono>TRGBTripleArray = array[Word] of TRGBTriple</mono>, but since we can treat the three color components (<var>rgbtRed</var>, <var>rgbtGreen</var>, <var>rgbtBlue</var>) in exactly the same way, we can access the scanline as a <var>pByteArray</var> of <mono>3 * Bitmap.Width</mono> bytes.</p>"
Units=SysUtils,Graphics
SeeAlso=AdjustColorBrightness
Snip=335.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[AdjustImage_A]
DisplayName="AdjustImage (TCanvas overload)"
DescEx="<p>Adjusts the area defined by <var>Rect</var> of the image displayed on <var>SrcCvs</var>, storing the resulting image on <var>DestCvs</var>.</p><p>Any one or more of the brightness, contrast, tint, saturation and gamma values of the image can be adjusted. The image may also be inverted (negated).</p><p>Returns True if the adjustment succeeds, False if it fails.</p>"
Extra="<p>Adapted from a routine contributed by Montor.</p><p>To ensure any one of the <var>Brightness</var>, <var>Contrast</var>, <var>Tint</var>, <var>Saturation</var> or <var>Gamma</var> parameter values has no effect on the adjusted image pass the appropriate <var>AINulBrightness</var>, <var>AINulContrast</var>, <var>AINulTint</var>, <var>AINulSaturation</var> or <var>AINulGamma</var> constant as the parameter value.</p>"
Units=Windows,Graphics,Types
Depends=AdjustImageConsts,AdjustImageTypes
SeeAlso=AdjustImageConsts,AdjustImageTypes,AdjustImage_B,AdjustImage_C
Snip=388.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[AdjustImage_B]
DisplayName="AdjustImage (TBitmap overload 1)"
DescEx="<p>Adjusts the image contained in bitmap <var>SrcBmp</var> and stores the resulting image in bitmap <var>DestBmp</var>.</p><p>Any one or more of the brightness, contrast, tint, saturation and gamma values of the bitmap's image can be adjusted. The image may also be inverted (negated).</p><p>Returns True if the adjustment succeeds, False if it fails.</p>"
Extra="<p>To ensure any one of the <var>Brightness</var>, <var>Contrast</var>, <var>Tint</var>, <var>Saturation</var> or <var>Gamma</var> parameter values has no effect on the adjusted image pass the appropriate <var>AINulBrightness</var>, <var>AINulContrast</var>, <var>AINulTint</var>, <var>AINulSaturation</var> or <var>AINulGamma</var> constant as the parameter value.</p>"
Units=Graphics
Depends=AdjustImageConsts,AdjustImageTypes,AdjustImage_A
SeeAlso=AdjustImageConsts,AdjustImageTypes,AdjustImage_A,AdjustImage_C
Snip=389.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[AdjustImage_C]
DisplayName="AdjustImage (TBitmap overload 2)"
DescEx="<p>Adjusts the image contained in the given bitmap, updating it in place.</p><p>Any one or more of the brightness, contrast, tint, saturation and gamma values of the bitmap's image can be adjusted. The image may also be inverted (negated).</p><p>Returns True if the adjustment succeeds, False if it fails.</p>"
Extra="<p>To ensure any one of the <var>Brightness</var>, <var>Contrast</var>, <var>Tint</var>, <var>Saturation</var> or <var>Gamma</var> parameter values has no effect on the adjusted image pass the appropriate <var>AINulBrightness</var>, <var>AINulContrast</var>, <var>AINulTint</var>, <var>AINulSaturation</var> or <var>AINulGamma</var> constant as the parameter value.</p>"
Units=Graphics
Depends=AdjustImageConsts,AdjustImageTypes,AdjustImage_A
SeeAlso=AdjustImageConsts,AdjustImageTypes,AdjustImage_A,AdjustImage_B
Snip=390.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ColorToHSB]
DescEx="Converts the given <var>TColor</var> value to a <var>THSBColor</var> value, which is returned."
Extra="<p>System colours are converted to their actual values before conversion.</p>"
Units=Graphics
Depends=THSBColor,ColorToRGBTriple,RGBToHSB
SeeAlso=RGBToHSB
Snip=288.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CountColors]
DescEx="<p>Counts and returns the number of unique RGB triples in the given <var>TBitmap</var> object.</p><p>The bitmap must be in <var>pf24Bit</var> format.</p>"
Extra="<p>Uses a 2D array of <var>TBits</var> objects - when a (red, green) combination occurs for the first time, it creates a 256-bit array of bits in blue dimension. So, overall this is a fairly sparse matrix for most images.</p><p>From the former EFG's Delphi Reference Library.</p><p>EFG tested with pictures created with a known number of colours, including a specially constructed image with 1024 &#215; 1024 = 1,048,576 colours.</p>"
Units=Classes,Graphics
Depends=RGBTripleArray
Snip=452.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[CreateDisplayDC]
Desc="Creates and returns a display device context."
Extra="<p>The device context must be deleted using Windows' <var>DeleteDC</var> function.</p>"
Units=Windows
Snip=147.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DarkenColor]
Desc="Darkens the given colour by the given percentage and returns the resulting colour."
Extra="<p>Darkening a colour by 0% does not change it. Darkening by 100% or more makes the colour black.</p><p>System colours are converted to the actual colour they represent before darkening.</p><p>Inspired by code contributed by Topellina.</p>"
Units=Windows,Graphics
Depends=Clamp,ExtractRGB
SeeAlso=LightenColor
Snip=401.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GetBMPSize]
Desc="Gets the dimensions of a bitmap image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p>"
Units=Types,SysUtils,Classes,Windows
SeeAlso=GetGIFSize,GetJPGSize,GetPNGSize
Snip=223.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GetGIFSize]
Desc="Gets the dimensions of a GIF image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p> <p>Adapted from code submitted by Bill Miller.</p>"
Units=Types,SysUtils,Classes
SeeAlso=GetBMPSize,GetJPGSize,GetPNGSize
Snip=222.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GetIconHotspot]
Desc="Gets position of the given icon's hotspot."
Extra="<p>This routine is particularly useful if the icon represents a cursor. This is done by assigning a cursor's handle the icon's <var>Handle property</var>.</p>"
Units=Graphics,Windows,SysUtils
SeeAlso=IsCursorIcon,IsColorIcon,GetIconANDBitmask,GetIconXORBitmask
Snip=113.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GetJPGSize]
Desc="Gets the dimensions of a JPEG image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p> <p>Adapted from code submitted by Bill Miller.</p>"
Units=Types,SysUtils,Classes
Depends=ReadBigEndianWord
SeeAlso=GetBMPSize,GetGIFSize,GetPNGSize
Snip=220.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GetPNGSize]
Desc="Gets the dimensions of a PNG image stored in a file."
Extra="<p><strong>Note:</strong> for versions of Delphi that do not support the <mono>Types</mono> unit, try substituting <var>Windows.TSize</var> for <var>Types.TSize</var>.</p> <p>Adapted from code submitted by Bill Miller.</p>"
Units=Types,SysUtils,Classes
Depends=ReadBigEndianWord
SeeAlso=GetBMPSize,GetGIFSize,GetJPGSize
Snip=221.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[GreyScale_A]
DisplayName="GreyScale (inplace overload)"
DescEx="<p>Converts a colour bitmap to greyscale.</p><p>A colour bitmap is passed to the <var>Bmp</var> parameter which is then converted to greyscale in place.</p><p>Different conversion methods are supported. The chosen method is specified by passing a value from the <var>TGreyScaleMethod</var> enumeration to the <var>Method</var> parameter.</p>"
Extra="<p>See the documentation of the <var>TGreyScaleMethod</var> code snippet for details of the available conversion methods.</p>"
Units=Windows,Graphics,Math
Depends=CloneGraphicAsBitmap,TGreyScaleMethod
SeeAlso=GreyScale_B,MakeGreyScale,TGreyScaleMethod
Snip=446.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[GreyScale_B]
DisplayName="GreyScale (copy overload)"
DescEx="<p>Converts a colour bitmap to greyscale.</p><p>A colour bitmap passed to <var>SrcBmp</var> is converted to greyscale and the result is assigned to <var>DestBmp</var>.</p><p>Different conversion methods are supported. The chosen method is specified by passing a value from the <var>TGreyScaleMethod</var> enumeration to the <var>Method</var> parameter.</p>"
Extra="<p>See the documentation of the <var>TGreyScaleMethod</var> code snippet for details of the available conversion methods.</p>"
Units=Graphics
Depends=GreyScale_A,TGreyScaleMethod
SeeAlso=GreyScale_A,MakeGreyScale,TGreyScaleMethod
Snip=447.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[HalftoneStretch_A]
DisplayName="HalftoneStretch (TCanvas overload)"
DescEx="<p>Performs a high quality stretch copy operation from canvas <var>SrcCvs</var> to <var>DestCvs</var>.</p><p>The image occupying the area defined by <var>SrcRect</var> on <var>SrcCvs</var> is stretched to fill the area defined by <var>DestRect</var> on <var>DestCvs</var>.</p>"
Credits="Modified from code contributed by Montor."
Units=Windows,Graphics,Types
SeeAlso=HalftoneStretch_B
Snip=379.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[HalftoneStretch_B]
DisplayName="HalftoneStretch (TBitmap overload)"
DescEx="<p>Performs a high quality stretch copy of bitmap <var>SrcBmp</var> to bitmap <var>DestBmp</var>.</p><p>The image is stretched to completely fill <var>DestBmp</var>.</p>"
Units=Graphics,Types
Depends=HalftoneStretch_A
SeeAlso=HalftoneStretch_A
Snip=380.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[InvertBitmap_A]
DisplayName="InvertBitmap (inplace overload)"
DescEx="<p>Inverts the colours of bitmap <var>ABitmap</var>.</p><p><var>ABitmap</var> is updated in place. It is also converted to 24 bit pixel format if necessary.</p>"
Extra="<p>Modified from code contributed by Michael Rockett.</p>"
Units=SysUtils,Graphics
SeeAlso=InvertBitmap_B,AdjustImage_A,AdjustImage_B,AdjustImage_C
Snip=448.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[InvertBitmap_B]
DisplayName="InvertBitmap (copy overload)"
DescEx="<p>Inverts the colours of bitmap <var>SrcBmp</var> and stores the result in <var>DestBmp</var>.</p><p><var>SrcBmp</var> is not changed. <var>DestBmp</var> will be in 24 bit pixel format.</p>"
Units=Graphics
Depends=InvertBitmap_A
SeeAlso=InvertBitmap_A,AdjustImage_A,AdjustImage_B,AdjustImage_C
Snip=449.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsCursorIcon]
Desc="Checks if an icon represents a cursor. Returns True if icon represents a cursor or False if icon is a standard icon."
Extra="<p>To create an icon that represent a cursor, store the cursor's handle in the icon's <var>Handle</var> property.</p>"
Units=Graphics,Windows,SysUtils
SeeAlso=IsColorIcon,GetIconHotspot,GetIconANDBitmask,GetIconXORBitmask
Snip=114.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsTrueTypeFont_A]
DisplayName="IsTrueTypeFont (TFont overload)"
Desc="Checks if a font is a true type font."
Units=Windows,Graphics
Depends=CreateDisplayDC,IsFlagSet
SeeAlso=IsTrueTypeFont_B
Snip=341.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[IsTrueTypeFont_B]
DisplayName="IsTrueTypeFont (string overload)"
Desc="Checks if a named font is a true type font."
Units=Graphics
Depends=IsTrueTypeFont_A
SeeAlso=IsTrueTypeFont_A
Snip=342.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[JPEGPixelFormatToPixelFormat]
DescEx="<p>Converts and returns the given <var>TJPEGPixelFormat</var> format value to the equivalent <var>TPixelFormat</var> value.</p>"
Extra="<p>Slightly modified from code contributed by Bill Miller.</p>"
Units=SysUtils,Graphics,JPEG
Snip=620.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[LightenColor]
Desc="System colours are converted to their actual values before conversion."
Extra="<p>Lightening a colour by 0% does not change it. Lightening by 100% or more makes the colour white.</p><p>System colours are converted to the actual colour they represent before lightening.</p><p>Inspired by code contributed by both Topellina and Michael Rockett.</p>"
Units=Windows,Graphics
Depends=Clamp,ExtractRGB
SeeAlso=DarkenColor
Snip=402.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[RGBToHSB]
Desc="Converts an RGB colour to the equivalent HSV (HSB) colour."
Units=Windows,Math
Depends=THSBColor
SeeAlso=ColorToHSB
Snip=287.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RichEditToCanvas]
DescEx="<p>Renders the content of the given rich edit control onto the given canvas.</p><p><var>APixelsPerInch</var> must be set to the number of pixels per inch of the rich edit control's parent form.</p>"
Extra="<p>The content of the rich edit control is word wrapped within the width of the canvas' clipping rectangle and is truncated at its bottom.</p><p>Example of usage: <mono>RichEditToCanvas(RichEdit1, Image1.Canvas, Self.PixelsPerInch);</mono></p><p>Contributed by Bill Miller.</p>"
Units=Classes,Windows,Graphics,RichEdit,ComCtrls
Snip=289.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ScaleBitmap_A]
DisplayName="ScaleBitmap (copy overload)"
DescEx="Performs a high quality scaling of bitmap <var>ASrcBmp</var> and copies the result into <var>ADestBmp</var>. The required scale factor is given by <var>AScaling</var>."
Extra="<p>Modified from code contributed by Montor.</p>"
Units=Graphics,Types
Depends=ScaleRect,RectWidth,RectHeight,HalftoneStretch_A
SeeAlso=ScaleBitmap_B
Snip=384.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[ScaleBitmap_B]
DisplayName="ScaleBitmap (inplace overload)"
DescEx="Performs a high quality scaling of the given bitmap by scale factor <var>AScaling</var>. The bitmap is modified in place."
Extra="<p>Slightly modified from code contributed by Montor.</p>"
Units=Graphics
Depends=ScaleBitmap_A
SeeAlso=ScaleBitmap_A
Snip=385.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

## Graphics types ##

[AdjustImageTypes]
Kind=type
DisplayName="AdjustImage Types"
DescEx="<p>Types for use with the <var>AdjustImage</var> overloaded functions.</p><p>The types define valid ranges of values for various function parameters.</p>"
SeeAlso=AdjustImage_A,AdjustImage_B,AdjustImage_C,AdjustImageConsts
Snip=386.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RGBQuadArray]
Kind=type
Desc="A 256 element array of RGB quad values."
Extra="<p>Useful when working with 32 bit bitmap scanlines.</p><p>A similar type is used in the implementation of the Delphi <var>Graphics</var> unit, but is not exposed in the unit interface.</p>"
Units=Windows
SeeAlso=RGBTripleArray
Snip=451.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RGBTripleArray]
Kind=type
Desc="A 256 element array of RGB triple values."
Extra="<p>Useful when working with 24 bit bitmap scanlines.</p><p>A similar type is used in the implementation of the Delphi <var>Graphics</var> unit, but is not exposed in the unit interface.</p>"
Units=Windows
SeeAlso=RGBQuadArray
Snip=450.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TColorRec]
Kind=type
DescEx="Cracker record that provides several different views of a <var>TColor</var> value and allows it to be assembled from its constituent parts."
Extra="<p>Contributed by Montor.</p> <p><strong>Note:</strong> Care needs to be taken when using <var>SysFlag</var> to detect a system colour, because <var>SysFlag</var> will be equal to $FF if a normal colour has an alpha transparency of $FF.</p>"
Snip=375.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TGreyScaleMethod]
Kind=type
Desc="Enumeration of possible methods used when coverting a bitmap to greyscale."
Extra="<p>Used in parameter lists of <var>GreyScale</var> overloaded routines.</p> <p>Names based on the <em>Lightness</em>, <em>Average</em> and <em>Luminosity</em> algorithms presented in <a href="http://www.johndcook.com/blog/2009/08/24/algorithms-convert-color-grayscale/">The Endeavour</a> blog.</p>"
SeeAlso=GreyScale_A,GreyScale_B
Snip=445.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[THSBColor]
Kind=type
Desc="Record storing Hue, Saturation and Brightness colour space values."
SeeAlso=RGBToHSB,ColorToHSB
Snip=286.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

## Graphics constants ##

[AdjustImageConsts]
Kind=const
DisplayName="AdjustImage Constants"
DescEx="<p>Constants used to pass default values to the <var>AdjustImage</var> overloaded functions.</p><p>Using these constants for the related function parameters means that the parameter will have no effect on the adjusted image.</p>"
SeeAlso=AdjustImage_A,AdjustImage_B,AdjustImage_C,AdjustImageTypes
Snip=387.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
