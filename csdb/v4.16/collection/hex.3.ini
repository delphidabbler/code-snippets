[HexByteSize]
Desc="Returns the number of bytes represented by the given hexadecimal string."
Extra="<p>Assumes that <var>HexStr</var> contains only valid hex digits, optionally prefixed by '$' or '0x'.</p>"
Depends=StripHexPrefix
SeeAlso=HexToBuf
TestInfo=advanced
Snip=318.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[HexToBuf]
Desc="Writes the bytes represented by the given hexadecimal string into the given buffer, which must be large enough to receive the data."
Extra="<p>Use <var>HexByteSize</var> to determine the size of buffer required. This function assumes the buffer is the correct size.</p> <p><var>HexStr</var> must not be empty and must contain only valid hex digits, optionally preceded by '$' or '0x'. An exception is raised if an invalid digit is encountered. A leading '0' is added to hex strings with odd length.</p>"
Depends=TryHexToBuf
SeeAlso=TryHexToBuf,HexToBytes,HexToInt,HexToInt64
TestInfo=advanced
Snip=323.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[HexToBytes]
Desc="Writes the bytes represented by the given hexadecimal string into an array of bytes, which is returned"
Extra="<p><var>HexStr</var> must contain only valid hex digits, optionally prefixed by '$' or '0x' otherwise an exception is raised.</p>"
Depends=TBytes,TryHexToBytes
SeeAlso=TryHexToBytes,HexToBuf,HexToInt,HexToInt64
TestInfo=advanced
Snip=324.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[HexToInt]
Desc="Converts the given hexadecimal string to an integer."
Extra="<p><var>HexStr</var> must contain only valid hex digits, optionally prefixed by '$' or '0x' otherwise an exception is raised.</p>"
Depends=TryHexToInt
SeeAlso=TryHexToInt,HexToIntDef,HexToBuf,HexToBytes,HexToInt64
TestInfo=advanced
Snip=325.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[HexToInt64]
Desc="Converts the given hexadecimal string to a 64 bit integer."
Extra="<p><var>HexStr</var> must contain only valid hex digits, optionally prefixed by '$' or '0x' otherwise an exception is raised.</p>"
Depends=TryHexToInt64
SeeAlso=TryHexToInt64,HexToInt64Def,HexToBuf,HexToBytes,HexToInt
TestInfo=advanced
Snip=326.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[HexToInt64Def]
Desc="Converts the given hexadecimal string to a 64 bit integer. If the conversion fails the specified default value is returned."
Extra="<p><var>HexStr</var> may be prefixed by either '$' or '0x' or have no prefix.</p>"
Depends=TryHexToInt64
SeeAlso=TryHexToInt64,HexToInt64,HexToIntDef
TestInfo=advanced
Snip=328.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[HexToIntDef]
Desc="Converts the given hexadecimal string to an integer. If the conversion fails the specified default value is returned."
Extra="<p><var>HexStr</var> may be prefixed by either '$' or '0x' or have no prefix.</p>"
Depends=TryHexToInt
SeeAlso=TryHexToInt,HexToInt,HexToInt64Def
TestInfo=advanced
Snip=327.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryHexToBuf]
Desc="Attempts to convert the given hexadecimal string into a binary value that is written to  buffer Buf. Returns True on success or False on error, leaving Buf in an unknown state. Buf must be large enough to receive all the converted data."
DescEx="<p>Attempts to convert the given hexadecimal string into a binary value that is written to buffer <var>Buf</var>.</p><p>Returns True on success or False on error, leaving <var>Buf</var> in an unknown state.</p><p><var>Buf</var> must be large enough to receive all the converted data.</p>"
Extra="<p>The hexadecimal string must not be empty and contain only valid hex digits, optionally prefixed by '$' or '0x'. A leading '0' is added to hex strings with odd length.</p><p>Use <var>HexByteSize</var> to determine the size of buffer required.</p>"
Depends=StripHexPrefix,TryHexToInt
SeeAlso=HexToBuf,TryHexToBytes,TryHexToInt,TryHexToInt64
TestInfo=advanced
Snip=321.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryHexToBytes]
Desc="Attempts to convert the given hexadecimal string into an array of bytes. Returns True on success and passes back resulting array in Bytes. Returns False on error, leaving Bytes underfined."
DescEx="<p>Attempts to convert the given hexadecimal string into an array of bytes.</p><p>Returns True on success and passes back resulting array in <var>Bytes</var>. Returns False on error, leaving <var>Bytes</var> underfined.</p>"
Extra="<p>The hexadecimal string must contain only valid hex digits, optionally prefixed by '$' or '0x'. A leading '0' is added to hex strings with odd length.</p>"
Depends=HexByteSize,TBytes,TryHexToBuf
SeeAlso=HexToBytes,TryHexToBuf,TryHexToInt,TryHexToInt64
TestInfo=advanced
Snip=322.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
