[AddThousandSeparator]
Desc="Adds the 'thousands separator' specified by C at the correct location(s) in string S and returns the result. S is assumed to be the string representation of a positive whole number."
DescEx="<p>Adds the &quot;thousands separator&quot; specified by <var>C</var> at the correct location(s) in string <var>S</var> and returns the result.</p><p><var>S</var> is assumed to be the string representation of a positive whole number.</p>"
Credits="Contributed by Bill Miller."
SeeAlso=AddDefThousandSeparator
Snip=162.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ContainsDelims]
Desc="Checks if string S contains any of the characters from the Delimiters string. Returns True if any delimiter character is found or False if not."
DescEx="<p>Checks if string <var>S</var> contains any of the characters from the <var>Delimiters</var> string.</p><p>Returns True if any delimiter character is found or False if not.</p>"
Units=SysUtils
SeeAlso=CountDelims,ContainsWhiteSpace
Snip=238.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[CountDelims]
Desc="Returns the number of occurences of any character from Delims in the given string S."
DescEx="Returns the number of occurences of any character from <var>Delims</var> in the given string <var>S</var>."
Units=SysUtils
SeeAlso=ContainsDelims
Snip=032.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[CountUnquotedWords]
Desc="Returns the number of space delimited words in string S. Any words enclosed by the quote character AQuote are counted as one word."
DescEx="Returns the number of <em>space</em> delimited words in string <var>S</var>. Any words enclosed by the quote character <var>AQuote</var> are counted as one word."
Credits="Contributed by Rubem Rocha."
Units=Classes
SeeAlso=ExplodeUnquotedWords,CountWords,WordCount
Snip=183.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DelAllStr]
Desc="Deletes all occurrences of sub-string Needle from string HayStack and returns the resulting string. HayStack is returned unchanged if it does not contain Needle. The search is case sensitive."
DescEx="<p>Deletes all occurrences of sub-string <var>Needle</var> from string <var>HayStack</var> and returns the resulting string.</p><p><var>HayStack</var> is returned unchanged if it does not contain <var>Needle</var>.</p><p>The search is case sensitive.</p>"
Credits="Renamed from a routine contributed by Bill Miller."
SeeAlso=DelAllText,DelStr,DelText
Units=SysUtils
Snip=477.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DelAllText]
Desc="Deletes all occurrences of text Needle from text HayStack and returns the resulting string. HayStack is returned unchanged if it does not contain Needle. The search is case insensitive."
DescEx="<p>Deletes all occurrences of text <var>Needle</var> from text <var>HayStack</var> and returns the resulting string.</p><p><var>HayStack</var> is returned unchanged if it does not contain <var>Needle</var>.</p><p>The search is case insensitive.</p>"
Credits="Renamed from a routine contributed by Bill Miller."
SeeAlso=DelAllStr,DelStr,DelText
Units=SysUtils
Snip=478.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DelStr]
Desc="Deletes the first occurrence of sub-string Needle from string HayStack and returns the resulting string. HayStack is returned unchanged if it does not contain Needle. The search is case sensitive."
DescEx="<p>Deletes the first occurrence of sub-string <var>Needle</var> from string <var>HayStack</var> and returns the resulting string.</p><p><var>HayStack</var> is returned unchanged if it does not contain <var>Needle</var>.</p><p>The search is case sensitive.</p>"
Credits="Renamed from a routine contributed by Bill Miller."
SeeAlso=DelAllStr,DelAllText,DelText
Units=SysUtils
Snip=479.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DelText]
Desc="Deletes the first occurrence of text Needle from text HayStack and returns the resulting string. HayStack is returned unchanged if it does not contain Needle. The search is case insensitive."
DescEx="<p>Deletes the first occurrence of text <var>Needle</var> from text <var>HayStack</var> and returns the resulting string.</p><p><var>HayStack</var> is returned unchanged if it does not contain <var>Needle</var>.</p><p>The search is case insensitive.</p>"
Credits="Renamed from a routine contributed by Bill Miller."
SeeAlso=DelAllStr,DelAllText,DelStr
Units=SysUtils
Snip=480.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[DOSLineBreaks]
Desc="Converts all Unix and Mac line endings in the given string to DOS line endings and returns the result."
Comments="Any existing DOS line breaks are preserved."
Units=SysUtils
SeeAlso=UnixLineBreaks
Snip=190.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ExplodeUnquotedWords]
Desc="Extracts a list of space delimited words from string S and returns the number of words found. The extracted words are stored in stringlist List, overwriting any existing contents. Any words enclosed by the quote character AQuote are kept together as one word."
DescEx="<p>Extracts a list of space delimited words from string <var>S</var> and returns the number of words found. The extracted words are stored in stringlist <var>List</var>, overwriting any existing contents.</p><p>Any words enclosed by the quote character <var>AQuote</var> are kept together as one word.</p>"
Credits="Contributed by Rubem Rocha."
Units=Classes
SeeAlso=ExplodeWords,ExplodeStr
Snip=181.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsValidDouble]
Desc="Checks if the given string represents a valid double precision floating point number."
Units=SysUtils
SeeAlso=IsValidExtended,IsValidSingle
Snip=454.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsValidExtended]
Desc="Checks if the given string represents a valid extended precision floating point number."
Units=SysUtils
SeeAlso=IsValidDouble,IsValidSingle
Snip=455.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsValidSingle]
Desc="Checks if the given string represents a valid single precision floating point number."
Units=SysUtils
SeeAlso=IsValidDouble,IsValidExtended
Snip=456.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[JoinStr]
Desc="Joins all strings in string list SL together into a single string, which is returned. Strings are separated by delimiter text Delim. Empty strings are ignored unless AllowEmpty is True, when they cause a delimiter to be appended to the result string."
DescEx="<p>Joins all strings in string list <var>SL</var> together into a single string, which is returned.</p><p>Strings are separated by delimiter text <var>Delim</var>. Empty strings are ignored unless <var>AllowEmpty</var> is True, when they cause a delimiter to be appended to the result string.</p>"
Units=Classes
SeeAlso=ExplodeStr,ExplodeStrArray,JoinStrArray,SplitStr
Snip=031.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[JoinStrArray]
Desc="Joins all strings in string array Strings together into a single string, which is returned. Strings are separated by delimiter text Delim. Empty strings are ignored unless AllowEmpty is True, when they cause a delimiter to be appended to the result string."
DescEx="<p>Joins all strings in string array <var>Strings</var> together into a single string, which is returned.</p><p>Strings are separated by delimiter text <var>Delim</var>. Empty strings are ignored unless <var>AllowEmpty</var> is True, when they cause a delimiter to be appended to the result string.</p>"
SeeAlso=ExplodeStr,ExplodeStrArray,JoinStr,SplitStr
Snip=535.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[LastChar]
Desc="Returns the last character of the given string. It is an error if the string is empty."
DescEx="<p>Returns the last character of the given string.</p><p>It is an error if the string is empty.</p>"
Credits="Contributed by Guru Kathiresan."
Comments="This routine is not suitable for use with multi-byte character sets."
SeeAlso=StripLastChar
Snip=381.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[LastPos]
Desc="Finds and returns the position of the last occurence of sub string SubStr in string Str. Returns 0 if SubStr is not found."
DescEx="<p>Finds and returns the position of the last occurence of sub string <var>SubStr</var> in string <var>Str</var>.</p><p>Returns 0 if <var>SubStr</var> is not found.</p>"
Units=StrUtils
Snip=194.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=N
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[MultiSzToStrings]
Desc="Splits out individual strings from the 'multi string' buffer MultiSz and appends each string to string list Strings. MultiSz must point to a buffer containing a sequence of #0 terminated strings followed by an additional #0 character that indicates the end of the buffer. Does nothing if either Strings or MultiSz are nil."
DescEx="<p>Splits out individual strings from the &quot;multi string&quot; buffer <var>MultiSz</var> and appends each string to string list <var>Strings</var>.</p><p><var>MultiSz</var> must point to a buffer containing a sequence of <mono>#0</mono> terminated strings followed by an additional <mono>#0</mono> character that indicates the end of the buffer.</p><p>Does nothing if either <var>Strings</var> or <var>MultiSz</var> are nil.</p>"
Units=Classes,SysUtils
SeeAlso=StringsToMultiSz
Snip=062.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
