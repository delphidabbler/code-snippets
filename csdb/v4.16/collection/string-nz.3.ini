[ParseStr]
Desc="Splits the string StrToParse into segments separated by Delimiter and stores each segment in turn in string list Words, replacing any existing content."
DescEx="<p>Splits the string <var>StrToParse</var> into segments separated by <var>Delimiter</var> and stores each segment in turn in string list <var>Words</var>, replacing any existing content.</p>"
Extra="<p>If <var>StrToParse</var> contains adjacent <var>Delimiter</var> characters with no text between them then an empty element is added to the string list. Leading and trailing <var>Delimiter</var> characters cause an empty element to be added at the beginning and end of the string list respectively. For example <mono>ParseStr('|foo||bar|', '|', Words);</mono> causes <var>Words</var> to contain the five elements <mono>''</mono>, <mono>'foo'</mono>, <mono>''</mono>, <mono>'bar'</mono> and <mono>''</mono>.</p><p>Contributed by Mark Billig.</p>"
Units=Classes
SeeAlso=ExplodeStr,ParseDelims,SplitStr,SplitString
TestInfo=advanced
Snip=626.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PosByIndex]
Desc="Returns the start position of the Nth word in string Str. Words are delimited by any of the characters in Delim. Returns 0 if there is no such word."
DescEx="<p>Returns the start position of the <var>N</var>th word in string <var>Str</var>. Words are delimited by any of the characters in <var>Delim</var>.</p><p>Returns 0 if there is no such word.</p>"
Extra="<p>Slightly modified from code contributed by Bill Miller.</p>"
Depends=GetStartAndEndWord
SeeAlso=CutWordByIndex,DeleteWordByIndex,GetWordByIndex,ReplaceWordByIndex
Snip=307.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[QuoteSpacedString]
Desc="If string S contains white space it is surrounded in the quotes specified by Quote and the result is returned. If S does not contain white space it is returned unchanged."
DescEx="If string <var>S</var> contains white space it is surrounded in the quotes specified by <var>Quote</var> and the result is returned. If <var>S</var> does not contain white space it is returned unchanged."
Extra="<p>Any quote characters already contained within the string are left unchanged: they are not escaped.</p><p><strong>Note:</strong> This function recognises only the <em>space</em>, <mono>TAB</mono>, <mono>LF</mono>, <mono>VT</mono>, <mono>FF</mono> and <mono>CR</mono> characters as white space.</p>"
Depends=ContainsWhiteSpace
Snip=249.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReduceStr]
Desc="Reduces the length of string S by the number of characters given by ReduceBy and returns the result."
DescEx="Reduces the length of string <var>S</var> by the number of characters given by <var>ReduceBy</var> and returns the result."
Extra="<p><warning>Warning:</warning> This function actually operates on code points rather than characters, making it unsafe for use with ANSI multi-byte character sets or characters outside the Unicode <a href="http://en.wikipedia.org/wiki/Mapping_of_Unicode_character_planes">basic multilingual plane</a>.</p><p>Contributed by Bill Miller.</p>"
Snip=350.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReplaceWordByIndex]
Desc="Replaces the Nth word from string Str with NewWord. Words are delimited by the any of the characters in Delim. Modifies Str and returns True on success. Returns False and leaves Str unchanged if there is no Nth word."
DescEx="<p>Replaces the <var>N</var>th word from string <var>Str</var> with <var>NewWord</var>. Words are delimited by the any of the characters in <var>Delim</var>.</p><p>Modifies <var>Str</var> and returns True on success. Returns False and leaves <var>Str</var> unchanged if there is no <var>N</var>th word.</p>"
Extra="<p>Inspired by code contributed by Bill Miller.</p>"
Depends=GetStartAndEndWord
SeeAlso=CutWordByIndex,DeleteWordByIndex,GetWordByIndex,PosByIndex
Snip=308.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RemoveDuplicateStrings]
Desc="Removes duplicate strings from the given string list. The modified string list will be sorted."
DescEx="<p>Removes duplicate strings from the given string list.</p><p>The modified string list will be sorted.</p>"
Extra="<p>Modified from code contributed by Bill Miller, originally sourced from <a href="http://delphi.about.com/">http://delphi.about.com/</a>.</p>"
SeeAlso=StripDuplicateStrings
Units=Classes
Snip=616.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SplitPathList_A]
DisplayName="SplitPathList (TStrings overload)"
Desc="Splits PathList, which must contain semi-colon delimited file paths, into individual paths and appends each one to string list Paths."
DescEx="<p>Splits <var>PathList</var>, which must contain semi-colon delimited file paths, into individual paths and appends each one to string list <var>Paths</var>.</p>"
Extra="<p>Empty paths (represented by <mono>';;'</mono>), or those comprising only spaces, are ignored. Leading and trailing spaces are removed from paths (e.g. <mono>' C:\MyFile '</mono> is read as <mono>'C:\MyFile'</mono>).</p>"
Units=Classes
Depends=ExplodeStr
SeeAlso=SplitPathList_B
Snip=410.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SplitPathList_B]
DisplayName="SplitPathList (string array overload)"
Desc="Splits PathList, which must contain semi-colon delimited file paths, into individual paths and returns a string array containing them."
DescEx="<p>Splits <var>PathList</var>, which must contain semi-colon delimited file paths, into individual paths and returns a string array containing them.</p>"
Extra="<p>Empty paths (represented by <mono>';;'</mono>), or those comprising only spaces, are ignored. Leading and trailing spaces are removed from paths (e.g. <mono>' C:\MyFile '</mono> is read as <mono>'C:\MyFile'</mono>).</p>"
Units=Types
Depends=ExplodeStrArray
SeeAlso=SplitPathList_A
Snip=411.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SplitString]
Desc="Splits the string AText into segments separated by Delimiter and creates and returns a string list containing the segments. The caller is responsible for freeing the returnd string list object."
DescEx="<p>Splits the string <var>AText</var> into segments separated by <var>Delimiter</var> and creates and returns a string list containing the segments.</p><p>The caller is responsible for freeing the returnd string list object.</p>"
Extra="<p>If <var>AText</var> contains adjacent <var>Delimiter</var> strings with no text between them then an empty element is added to the string list. For example <mono>SplitString('foo||bar', '|');</mono> returns a string list containing the 3 elements <mono>'foo'</mono>, <mono>''</mono> and <mono>'bar'</mono>.</p><p>However if <var>AText</var> ends with one or more <var>Delimiter</var> strings then no blank element is added to the result for the last occurrence of <var>Delimiter</var>, e.g. <mono>SplitString('foo|bar|', '|');</mono> returns a string list containing just the 2 elements <mono>'foo'</mono> and <mono>'bar'</mono> while <mono>SplitString('foo|bar||', '|');</mono> returns the 3 element string list <mono>'foo'</mono>, <mono>'bar'</mono> and <mono>''</mono>.</p><p>Contributed by Daniel.</p>"
Units=SysUtils,Classes
SeeAlso=ExplodeStr,ParseDelims,ParseStr,SplitStr
TestInfo=advanced
Snip=627.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StringsToMultiSz]
Desc="Converts the strings from stringlist Strings into 'multi-string' format and stores the result in the buffer pointed to by MultiSz, which must be at least BufSize characters in size. Strings written to MultiSz are terminated by #0 and an additional #0 character terminates the list. Returns 0 on success or the required buffer size, in characters, if BufSize is too small or if MultiSz is nil."
DescEx="<p>Converts the strings from stringlist <var>Strings</var> into &quot;multi-string&quot; format and stores the result in the buffer pointed to by <var>MultiSz</var>, which must be at least <var>BufSize</var> characters in size.</p><p>Strings written to <var>MultiSz</var> are terminated by <mono>#0</mono> and an additional <mono>#0</mono> character terminates the list.</p><p>Returns 0 on success or the required buffer size, in characters, if <var>BufSize</var> is too small or if <var>MultiSz</var> is nil.</p>"
Extra="<p>To find the size of the <var>MultiSz</var> buffer required to accomodate all the strings from <var>Strings</var> first call <var>StringsToMultiSz</var> with <var>MultiSz</var> = <strong>nil</strong> and <var>BufSize</var> = 0. The required buffer size, in characters, will be returned.</p><p><strong>Note:</strong> The <var>BufSize</var> parameter and return value of <var>StringsToMultiSz</var> express buffer sizes in <em>characters</em>. For compilers using Unicode strings this is not the same as the buffer size in bytes.</p>"
Units=Classes,SysUtils
SeeAlso=MultiSzToStrings
Snip=063.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StripDuplicateStrings]
Desc="Returns a string array that is a copy of given array SA with duplicates removed. The returned array will be sorted."
DescEx="<p>Returns a string array that is a copy of given array <var>SA</var> with duplicates removed.</p><p>The returned array will be sorted.</p>"
SeeAlso=RemoveDuplicateStrings
Depends=ArrayToStringList,RemoveDuplicateStrings,StringListToArray
Units=Classes,Types
Snip=617.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StripWhiteSpace]
Desc="Removes all white space from the given string and returns the result."
Extra="<p><strong>Note:</strong> This function treats only the <em>space</em>, <mono>TAB</mono>, <mono>LF</mono>, <mono>VT</mono>, <mono>FF</mono> and <mono>CR</mono> characters as white space.</p>"
Units=SysUtils
Depends=IsWhiteSpace
SeeAlso=CompressWhiteSpace,ContainsWhiteSpace,IsWhiteSpace
Snip=536.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TitleCase]
Desc="Converts the given string to title case and returns the result."
Extra="<p>This function assumes the use of the English language.</p><p>True <a href="http://en.wikipedia.org/wiki/Title_case">title case</a> should ignore minor words, like &quot;and&quot; and &quot;the&quot; but this function, like many others, doesn't do that.</p>"
Units=SysUtils
Depends=IsWhiteSpace,IsCharInSet
Snip=134.3.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[WordCount]
Desc="Returns the number of white space delimited words in the given string."
Extra="<p><strong>Note:</strong> This function treats only the <em>space</em>, <mono>TAB</mono>, <mono>LF</mono>, <mono>VT</mono>, <mono>FF</mono> and <mono>CR</mono> characters as white space.</p>"
Units=SysUtils
Depends=CountDelims,CompressWhiteSpace
SeeAlso=CountWords,CountUnquotedWords
Snip=184.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
