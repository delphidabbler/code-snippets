[PadCenter]
Desc="Centre aligns string AString within a string of size AWidth and returns the result. The string is padded as necessary with character AChar."
DescEx="Centre aligns string <var>AString</var> within a string of size <var>AWidth</var> and returns the result. The string is padded as necessary with character <var>AChar</var>."
Comments="When an odd number of padding characters is required, the extra character is added on the right."
SeeAlso=PadLeft,PadRight
Snip=246.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PadLeft]
Desc="Left aligns string AString within a string of size AWidth and returns the result. The string is padded on the right as necessary with character AChar."
DescEx="Left aligns string <var>AString</var> within a string of size <var>AWidth</var> and returns the result. The string is padded on the right as necessary with character <var>AChar</var>."
Credits="Contributed by Bill Miller."
SeeAlso=PadCenter,PadRight
Snip=247.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PadRight]
Desc="Right aligns string AString within a string of size AWidth and returns the result. The string is padded on the left as necessary with character AChar."
DescEx="<p>Right aligns string <var>AString</var> within a string of size <var>AWidth</var> and returns the result. The string is padded on the left as necessary with character <var>AChar</var>.</p>"
Credits="Contributed by Bill Miller."
SeeAlso=PadCenter,PadLeft
Snip=248.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ParseDelims]
Desc="Returns the sub-string of string TextLine that begins at StartPos and is terminated by one of the delimiting characters from Delims or the end of the string. StartPos is updated to the index of the character after the delimiter. Returns the empty string if there is no sub-string following StartPos."
DescEx="<p>Returns the sub-string of string <var>TextLine</var> that begins at <var>StartPos</var> and is terminated by one of the delimiting characters from <var>Delims</var> or the end of the string.</p><p><var>StartPos</var> is updated to the index of the character after the delimiter.</p><p>Returns the empty string if there is no sub-string following <var>StartPos</var>.</p>"
Units=SysUtils
Snip=004.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReverseStr]
Desc="Returns the reverse of the given string."
Credits="Renamed from a routine contributed by Rubem Nascimento da Rocha."
Units=SysUtils,StrUtils
SeeAlso=ReverseStrR
TestInfo=advanced
Snip=438.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReverseStrR]
Desc="Returns the reverse of the given string."
Credits="Renamed from a routine contributed by Rubem Nascimento da Rocha."
Comments="Uses recursion."
Units=SysUtils,StrUtils
SeeAlso=ReverseStr
TestInfo=advanced
Snip=439.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SplitStr]
Desc="Splits string S at the first occurence of delimiter string Delim. S1 is set to to the sub-string of S before Delim and S2 to the remainder of S after Delim. If Delim is not found then S1 is set to S and S2 to the empty string. Returns True if S contains Delim or False if not."
DescEx="<p>Splits string <var>S</var> at the first occurence of delimiter string <var>Delim</var>. <var>S1</var> is set to to the sub-string of <var>S</var> before <var>Delim</var> and <var>S2</var> to the remainder of <var>S</var> after <var>Delim</var>.</p><p>If <var>Delim</var> is not found then <var>S1</var> is set to <var>S</var> and <var>S2</var> to the empty string.</p><p>Returns True if <var>S</var> contains <var>Delim</var> or False if not.</p>"
Units=SysUtils
SeeAlso=ExplodeStr,ExplodeStrArray,JoinStr,JoinStrArray
Snip=033.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StripAccelChars]
Desc="Strips all accelerator ('&') characters from the given string and returns the resulting string."
DescEx="Strips all accelerator ('<mono>&amp;</mono>') characters from the given string and returns the resulting string."
Credits="Renamed from a routine contributed by Rubem Nascimento da Rocha."
Units=SysUtils
TestInfo=advanced
Snip=440.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StripLastChar]
Desc="Removes the last character from the string S and returns the resulting string. If S is empty then it is returned unchanged."
DescEx="Removes the last character from the string <var>S</var> and returns the resulting string. If <var>S</var> is empty then it is returned unchanged."
Credits="Contributed by Guru Kathiresan."
Comments="NOTE: This routine is not suitable for use with multi-byte character sets."
Extra="<strong>Note:</strong> This routine is not suitable for use with multi-byte character sets."
SeeAlso=LastChar
Snip=382.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StrToken]
Desc="Finds and returns the first token in string S, delimited by the given separator character. The token and separator are removed from S. If no separators are found then the whole of S is returned and S is then set to the empty string."
DescEx="<p>Finds and returns the first token in string <var>S</var>, delimited by the given separator character. The token and separator are removed from <var>S</var>.</p><p>If no separators are found then the whole of <var>S</var> is returned and <var>S</var> is then set to the empty string.</p>"
Credits="Slightly modified from code contributed by Guru Kathiresan."
Units=SysUtils
SeeAlso=StrTokenCount
Snip=537.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StrTokenCount]
Desc="Counts and returns the number of tokens in string S delimited by the given separator character. Empty strings before separators are counted as tokens, but an empty string after the last separator is not."
DescEx="<p>Counts and returns the number of tokens in string <var>S</var> delimited by the given separator character.</p><p>Empty strings before separators are counted as tokens, but an empty string after the last separator is not.</p>"
Credits="Contributed by Guru Kathiresan."
SeeAlso=StrToken
Depends=StrToken
Snip=538.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TextWrap]
Desc="Word wraps string Text, using the space character as delimiter, into lines of maximum width Width, with each line left-padded with Margin spaces. The resulting text is returned in a string with lines separated by CRLF."
DescEx="<p>Word wraps string <var>Text</var>, using the <em>space</em> character as delimiter, into lines of maximum width <var>Width</var>, with each line left-padded with <var>Margin</var> spaces.</p><p>The resulting text is returned in a string with lines separated by <mono>CRLF</mono>.</p>"
Units=Classes
Depends=ExplodeStr
Snip=141.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TrimChar]
Desc="Trims occurrences of character C from both ends of string S and returns the result."
DescEx="Trims occurrences of character <var>C</var> from both ends of string <var>S</var> and returns the result."
Comments="The character to be trimmed must be a single byte character."
Depends=TrimLeftChar,TrimRightChar
SeeAlso=TrimLeftChar,TrimRightChar
Snip=195.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TrimLeftChar]
Desc="Trims occurrences of character C from the start of string S and returns the result."
DescEx="Trims occurrences of character <var>C</var> from the start of string <var>S</var> and returns the result."
Comments="The character to be trimmed must be a single byte character."
SeeAlso=TrimChar,TrimRightChar
Snip=196.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TrimRightChar]
Desc="Trims occurrences of character C from the end of string S and returns the result."
DescEx="Trims occurrences of character <var>C</var> from the end of string <var>S</var> and returns the result."
Comments="The character to be trimmed must be a single byte character."
SeeAlso=TrimChar,TrimLeftChar
Snip=197.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TrimStringList]
Desc="Removes lines prefixed by Prefix from string list List, updating it in place. Set Prefix to the empty string to remove empty lines, including those containing only white space."
DescEx="<p>Removes lines prefixed by <var>Prefix</var> from string list <var>List</var>, updating it in place.</p><p>Set <var>Prefix</var> to the empty string to remove empty lines, including those containing only white space.</p>"
Credits="Closely based on a routine contributed by Joe Donth."
Units=SysUtils,Classes
SeeAlso=ExplodeStr,JoinStr
Snip=131.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[UnixLineBreaks]
Desc="Converts all DOS and Mac line endings in the given string to Unix line endings and returns the result."
Comments="Any existing Unix line breaks are preserved."
Units=SysUtils
SeeAlso=DOSLineBreaks
Snip=191.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

# from string-nz.3.ini

[ParseStr]
Desc="Splits the string StrToParse into segments separated by Delimiter and stores each segment in turn in string list Words, replacing any existing content."
DescEx="<p>Splits the string <var>StrToParse</var> into segments separated by <var>Delimiter</var> and stores each segment in turn in string list <var>Words</var>, replacing any existing content.</p>"
Extra="<p>If <var>StrToParse</var> contains adjacent <var>Delimiter</var> characters with no text between them then an empty element is added to the string list. Leading and trailing <var>Delimiter</var> characters cause an empty element to be added at the beginning and end of the string list respectively. For example <mono>ParseStr('|foo||bar|', '|', Words);</mono> causes <var>Words</var> to contain the five elements <mono>''</mono>, <mono>'foo'</mono>, <mono>''</mono>, <mono>'bar'</mono> and <mono>''</mono>.</p><p>Contributed by Mark Billig.</p>"
Units=Classes
SeeAlso=ExplodeStr,ParseDelims,SplitStr,SplitString
TestInfo=advanced
Snip=626.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PosByIndex]
Desc="Returns the start position of the Nth word in string Str. Words are delimited by any of the characters in Delim. Returns 0 if there is no such word."
DescEx="<p>Returns the start position of the <var>N</var>th word in string <var>Str</var>. Words are delimited by any of the characters in <var>Delim</var>.</p><p>Returns 0 if there is no such word.</p>"
Extra="<p>Slightly modified from code contributed by Bill Miller.</p>"
Depends=GetStartAndEndWord
SeeAlso=CutWordByIndex,DeleteWordByIndex,GetWordByIndex,ReplaceWordByIndex
Snip=307.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[QuoteSpacedString]
Desc="If string S contains white space it is surrounded in the quotes specified by Quote and the result is returned. If S does not contain white space it is returned unchanged."
DescEx="If string <var>S</var> contains white space it is surrounded in the quotes specified by <var>Quote</var> and the result is returned. If <var>S</var> does not contain white space it is returned unchanged."
Extra="<p>Any quote characters already contained within the string are left unchanged: they are not escaped.</p><p><strong>Note:</strong> This function recognises only the <em>space</em>, <mono>TAB</mono>, <mono>LF</mono>, <mono>VT</mono>, <mono>FF</mono> and <mono>CR</mono> characters as white space.</p>"
Depends=ContainsWhiteSpace
Snip=249.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReduceStr]
Desc="Reduces the length of string S by the number of characters given by ReduceBy and returns the result."
DescEx="Reduces the length of string <var>S</var> by the number of characters given by <var>ReduceBy</var> and returns the result."
Extra="<p><warning>Warning:</warning> This function actually operates on code points rather than characters, making it unsafe for use with ANSI multi-byte character sets or characters outside the Unicode <a href="http://en.wikipedia.org/wiki/Mapping_of_Unicode_character_planes">basic multilingual plane</a>.</p><p>Contributed by Bill Miller.</p>"
Snip=350.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReplaceWordByIndex]
Desc="Replaces the Nth word from string Str with NewWord. Words are delimited by the any of the characters in Delim. Modifies Str and returns True on success. Returns False and leaves Str unchanged if there is no Nth word."
DescEx="<p>Replaces the <var>N</var>th word from string <var>Str</var> with <var>NewWord</var>. Words are delimited by the any of the characters in <var>Delim</var>.</p><p>Modifies <var>Str</var> and returns True on success. Returns False and leaves <var>Str</var> unchanged if there is no <var>N</var>th word.</p>"
Extra="<p>Inspired by code contributed by Bill Miller.</p>"
Depends=GetStartAndEndWord
SeeAlso=CutWordByIndex,DeleteWordByIndex,GetWordByIndex,PosByIndex
Snip=308.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[RemoveDuplicateStrings]
Desc="Removes duplicate strings from the given string list. The modified string list will be sorted."
DescEx="<p>Removes duplicate strings from the given string list.</p><p>The modified string list will be sorted.</p>"
Extra="<p>Modified from code contributed by Bill Miller, originally sourced from <a href="http://delphi.about.com/">http://delphi.about.com/</a>.</p>"
SeeAlso=StripDuplicateStrings
Units=Classes
Snip=616.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SplitPathList_A]
DisplayName="SplitPathList (TStrings overload)"
Desc="Splits PathList, which must contain semi-colon delimited file paths, into individual paths and appends each one to string list Paths."
DescEx="<p>Splits <var>PathList</var>, which must contain semi-colon delimited file paths, into individual paths and appends each one to string list <var>Paths</var>.</p>"
Extra="<p>Empty paths (represented by <mono>';;'</mono>), or those comprising only spaces, are ignored. Leading and trailing spaces are removed from paths (e.g. <mono>' C:\MyFile '</mono> is read as <mono>'C:\MyFile'</mono>).</p>"
Units=Classes
Depends=ExplodeStr
SeeAlso=SplitPathList_B
Snip=410.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SplitPathList_B]
DisplayName="SplitPathList (string array overload)"
Desc="Splits PathList, which must contain semi-colon delimited file paths, into individual paths and returns a string array containing them."
DescEx="<p>Splits <var>PathList</var>, which must contain semi-colon delimited file paths, into individual paths and returns a string array containing them.</p>"
Extra="<p>Empty paths (represented by <mono>';;'</mono>), or those comprising only spaces, are ignored. Leading and trailing spaces are removed from paths (e.g. <mono>' C:\MyFile '</mono> is read as <mono>'C:\MyFile'</mono>).</p>"
Units=Types
Depends=ExplodeStrArray
SeeAlso=SplitPathList_A
Snip=411.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[SplitString]
Desc="Splits the string AText into segments separated by Delimiter and creates and returns a string list containing the segments. The caller is responsible for freeing the returnd string list object."
DescEx="<p>Splits the string <var>AText</var> into segments separated by <var>Delimiter</var> and creates and returns a string list containing the segments.</p><p>The caller is responsible for freeing the returnd string list object.</p>"
Extra="<p>If <var>AText</var> contains adjacent <var>Delimiter</var> strings with no text between them then an empty element is added to the string list. For example <mono>SplitString('foo||bar', '|');</mono> returns a string list containing the 3 elements <mono>'foo'</mono>, <mono>''</mono> and <mono>'bar'</mono>.</p><p>However if <var>AText</var> ends with one or more <var>Delimiter</var> strings then no blank element is added to the result for the last occurrence of <var>Delimiter</var>, e.g. <mono>SplitString('foo|bar|', '|');</mono> returns a string list containing just the 2 elements <mono>'foo'</mono> and <mono>'bar'</mono> while <mono>SplitString('foo|bar||', '|');</mono> returns the 3 element string list <mono>'foo'</mono>, <mono>'bar'</mono> and <mono>''</mono>.</p><p>Contributed by Daniel.</p>"
Units=SysUtils,Classes
SeeAlso=ExplodeStr,ParseDelims,ParseStr,SplitStr
TestInfo=advanced
Snip=627.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StringsToMultiSz]
Desc="Converts the strings from stringlist Strings into 'multi-string' format and stores the result in the buffer pointed to by MultiSz, which must be at least BufSize characters in size. Strings written to MultiSz are terminated by #0 and an additional #0 character terminates the list. Returns 0 on success or the required buffer size, in characters, if BufSize is too small or if MultiSz is nil."
DescEx="<p>Converts the strings from stringlist <var>Strings</var> into &quot;multi-string&quot; format and stores the result in the buffer pointed to by <var>MultiSz</var>, which must be at least <var>BufSize</var> characters in size.</p><p>Strings written to <var>MultiSz</var> are terminated by <mono>#0</mono> and an additional <mono>#0</mono> character terminates the list.</p><p>Returns 0 on success or the required buffer size, in characters, if <var>BufSize</var> is too small or if <var>MultiSz</var> is nil.</p>"
Extra="<p>To find the size of the <var>MultiSz</var> buffer required to accomodate all the strings from <var>Strings</var> first call <var>StringsToMultiSz</var> with <var>MultiSz</var> = <strong>nil</strong> and <var>BufSize</var> = 0. The required buffer size, in characters, will be returned.</p><p><strong>Note:</strong> The <var>BufSize</var> parameter and return value of <var>StringsToMultiSz</var> express buffer sizes in <em>characters</em>. For compilers using Unicode strings this is not the same as the buffer size in bytes.</p>"
Units=Classes,SysUtils
SeeAlso=MultiSzToStrings
Snip=063.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StripDuplicateStrings]
Desc="Returns a string array that is a copy of given array SA with duplicates removed. The returned array will be sorted."
DescEx="<p>Returns a string array that is a copy of given array <var>SA</var> with duplicates removed.</p><p>The returned array will be sorted.</p>"
SeeAlso=RemoveDuplicateStrings
Depends=ArrayToStringList,RemoveDuplicateStrings,StringListToArray
Units=Classes,Types
Snip=617.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[StripWhiteSpace]
Desc="Removes all white space from the given string and returns the result."
Extra="<p><strong>Note:</strong> This function treats only the <em>space</em>, <mono>TAB</mono>, <mono>LF</mono>, <mono>VT</mono>, <mono>FF</mono> and <mono>CR</mono> characters as white space.</p>"
Units=SysUtils
Depends=IsWhiteSpace
SeeAlso=CompressWhiteSpace,ContainsWhiteSpace,IsWhiteSpace
Snip=536.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TitleCase]
Desc="Converts the given string to title case and returns the result."
Extra="<p>This function assumes the use of the English language.</p><p>True <a href="http://en.wikipedia.org/wiki/Title_case">title case</a> should ignore minor words, like &quot;and&quot; and &quot;the&quot; but this function, like many others, doesn't do that.</p>"
Units=SysUtils
Depends=IsWhiteSpace,IsCharInSet
Snip=134.3.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[WordCount]
Desc="Returns the number of white space delimited words in the given string."
Extra="<p><strong>Note:</strong> This function treats only the <em>space</em>, <mono>TAB</mono>, <mono>LF</mono>, <mono>VT</mono>, <mono>FF</mono> and <mono>CR</mono> characters as white space.</p>"
Units=SysUtils
Depends=CountDelims,CompressWhiteSpace
SeeAlso=CountWords,CountUnquotedWords
Snip=184.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
