[CheckBDEInstalled]
Desc="Checks if the BDE is installed."
Extra="<p>For alternative approaches see <a href="http://www.delphidabbler.com/tips/28">Tip #28</a>, &quot;How to check if the BDE is installed&quot;, on <a href="http://www.delphidabbler.com/">DelphiDabbler.com</a>.</p><p><warning>Warning:</warning> Some editions of Delphi (e.g. Delphi 6 personal) do not provide the <mono>BDE</mono> unit, and so the routine will not compile on them.</p><p>Contributed by mdeltas.</p>"
Units=BDE
Snip=256.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=N
FPC=N

[EnglishColorName]
Desc="Returns the name of the given TColor value in American English. If the name of the colour is not known then the colour number in hex is returned. If AConvertSysColors is False and AColor is a system colour, then the name of the system colour is returned. When True, the name of the colour used to represent the system colour is returned. If AColor is not a system colour then AConvertSysColors has no effect."
DescEx="<p>Returns the name of the given <var>TColor</var> value in American English. If the name of the colour is not known then the colour number in hex is returned.</p><p>If <var>AConvertSysColors</var> is False and <var>AColor</var> is a system colour, then the name of the system colour is returned. When True, the name of the colour used to represent the system colour is returned. If <var>AColor</var> is not a system colour then <var>AConvertSysColors</var> has no effect.</p>"
Extra="<p>Modified from code contributed by Bill Miller.</p><p>Hex numbers are prefixed by <mono>'$'</mono> when compiled with Delphi or Free Pascal or <mono>'0x'</mono> if compiled with C++ Builder.</p>"
Units=Graphics,StrUtils
Snip=567.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[Exchange_Byte]
DisplayName="Exchange (Byte overload)"
Desc="Exchanges the values of two given unsigned 8 bit integers."
SeeAlso=Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=459.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Int64]
DisplayName="Exchange (Int64 overload)"
Desc="Exchanges the values of two given signed 64 bit integers."
SeeAlso=Exchange_Byte,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=460.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Longint]
DisplayName="Exchange (Longint overload)"
Desc="Exchanges the values of two given signed 32 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word,ExchangeInt.
Snip=461.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Longword]
DisplayName="Exchange (Longword overload)"
Desc="Exchanges the values of two given unsigned 32 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=462.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Shortint]
DisplayName="Exchange (Shortint overload)"
Desc="Exchanges the values of two given signed 8 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=463.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Smallint]
DisplayName="Exchange (Smallint overload)"
Desc="Exchanges the values of two given signed 16 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_UInt64,Exchange_Word
Snip=464.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_UInt64]
DisplayName="Exchange (UInt64 overload)"
Desc="Exchanges the values of two given unsigned 64 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_Word
Snip=465.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=N
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Word]
DisplayName="Exchange (Word overload)"
Desc="Exchanges the values of two given unsigned 16 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64
Snip=466.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FloatToNumberText]
Desc="Returns the English text representation of floating point value ANumber. APrecision determines the number of decimal places to include in the returned string."
DescEx="<p>Returns the English text representation of floating point value <var>ANumber</var>.</p><p><var>APrecision</var> determines the number of decimal places to include in the returned string.</p>"
Extra="<p>Users of Delphi XE &amp; later or Free Pascal 2.6.0 &amp; later should use <var>FloatToNumberTextXE</var> instead of this routine.</p><p>Adapted from code contributed by Bill Miller.</p>"
Units=SysUtils
Depends=IntToNumberText
SeeAlso=IntToNumberText,FloatToNumberTextXE
Snip=217.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=N
DelphiXE4=N
DelphiXE5=N
DelphiXE6=N
DelphiXE7=N
DelphiXE8=N
Delphi10S=N
FPC=Y

[FloatToNumberTextXE]
Desc="Returns the English text representation of floating point value ANumber. APrecision determines the number of decimal places to include in the returned string."
DescEx="<p>Returns the English text representation of floating point value <var>ANumber</var>.</p><p><var>APrecision</var> determines the number of decimal places to include in the returned string.</p>"
Extra="<p>This is a version of <var>FloatToNumberText</var> suitable for use with Delphi XE &amp; later or Free Pascal 2.6.0 &amp; later. For Delphi 2010 and earlier, use <var>FloatToNumberText</var> instead.</p><p>Adapted from code contributed by Bill Miller.</p>"
Units=SysUtils
Depends=IntToNumberText
SeeAlso=IntToNumberText,FloatToNumberText
Snip=556.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=N
Delphi7=N
Delphi2005Win32=N
Delphi2006Win32=N
Delphi2007=N
Delphi2009Win32=N
Delphi2010=N
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FormInstanceCount_A]
DisplayName="FormInstanceCount (class type overload)"
Desc="Counts and returns the current number of form instances that have, or descend from, class AFormClass."
DescEx="Counts and returns the current number of form instances that have, or descend from, class <var>AFormClass</var>."
Extra="<p>Contributed by Rubem Nascimento da Rocha.</p>"
Units=Forms
SeeAlso=FormInstanceCount_B
Snip=338.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[FormInstanceCount_B]
DisplayName="FormInstanceCount (class name overload)"
Desc="Counts and returns the current number of form instances that have class name AFormClassName."
DescEx="Counts and returns the current number of form instances that have class name <var>AFormClassName</var>."
Extra="<p>Contributed by Rubem Nascimento da Rocha.</p> <p>Requires an exact match of class name. Descendant classes are excluded.</p>"
Units=Forms
SeeAlso=FormInstanceCount_A
Snip=339.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[FractionToStr]
Desc="Converts a fraction expressed as a numerator and denominator to a string."
Extra="<p>From Bill Miller's snippets collection.</p>"
Units=SysUtils
SeeAlso=FractionToStrEx,NormaliseFractionSign
Snip=557.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FractionToStrEx]
Desc="Converts a fraction expressed as a numerator and denominator to a string. If Normalise is True the sign of the fraction is normalised before conversion."
DescEx="<p>Converts a fraction expressed as a numerator and denominator to a string. If <var>Normalise</var> is True the sign of the fraction is normalised before conversion.</p>"
Extra="<p>Inspired by code from Bill Miller's snippets collection.</p>"
Units=SysUtils
Depends=NormaliseFractionSign
SeeAlso=FractionToStr,NormaliseFractionSign
Snip=558.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FreeStringsObjects]
Desc="Frees all objects stored in the Objects[] property of the given string list."
DescEx="<p>Frees all objects stored in the <var>Objects[]</var> property of the given string list.</p>"
Extra="<p>Based on code from the article <a href="http://delphi.about.com/od/delphitips2009/qt/free-strings-objects.htm">Freeing Objects in Delphi's TStrings Items</a> on About.com.</p><p><strong>Note:</strong> From Delphi 2009 <var>TStringList</var> has an overloaded constructor that takes an <var>OwnsObjects</var> parameter that, when True, frees the objects in <var>Objects[]</var> when the string list is destroyed.</p>"
Units=Classes
Snip=534.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToBinary_Int32]
DisplayName="IntToBinary (Integer overload)"
Desc="Returns a string containing the binary value of 32 bit signed integer Value. Digits indicates the minimum number of binary digits to return."
DescEx="<p>Returns a string containing the binary value of 32 bit signed integer <var>Value</var>. <var>Digits</var> indicates the minimum number of binary digits to return.</p>"
Depends=PadRight
SeeAlso=IntToOctal,IntToBinary_Int64
Snip=624.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToBinary_Int64]
DisplayName="IntToBinary (Int64 overload)"
Desc="Returns a string containing the binary value of 64 bit signed integer Value. Digits indicates the minimum number of binary digits to return."
DescEx="<p>Returns a string containing the binary value of 64 bit signed integer <var>Value</var>. <var>Digits</var> indicates the minimum number of binary digits to return.</p>"
Depends=IntToBinary_Int32
SeeAlso=IntToOctal,IntToBinary_Int32
Units=SysUtils
Snip=625.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsCharInSet]
Desc="Checks if character Ch is in the set of characters Chars."
DescEx="Checks if character <var>Ch</var> is in the set of characters <var>Chars</var>."
Extra="<p>This routine works correctly with Unicode and non-Unicode versions of Delphi.</p>"
Units=SysUtils
Depends=TCharSet
Snip=251.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsFlagSet]
Desc="Checks if the bit flags given by Flags are set in bitmask Mask."
DescEx="Checks if the bit flags given by <var>Flags</var> are set in bitmask <var>Mask</var>."
Extra="<p><var>Flags</var> may contain one or more bit flags. <var>IsFlagSet</var> returns True only if <em>all</em> the bit flags in <var>Flags</var> are set in <var>Mask</var>.</p>"
Snip=212.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ProgIDInstalled]
Desc="Checks if the given program identifier is known to the system, i.e. is installed."
Extra="<p><strong>Example:</strong> <mono><strong>if</strong> ProgIdInstalled('InternetExplorer.Application') <strong>then</strong> ...</mono></p><p>Contributed by Michael Rockett.</p>"
Units=ActiveX
Snip=331.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[VariantIsObject]
Desc="Checks if a the variant V contains an object."
DescEx="<p>Checks if a the variant <var>V</var> contains an object.</p>"
Extra="<p>The parameter can be of type <var>Variant</var> or <var>OleVariant</var>.</p><p>It is possible a value judged to be an object could be set to <strong>nil</strong>. It is up the caller to check for this.</p><p>Adapted from code contributed by Bill Miller.</p>"
Units=Variants
Snip=622.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
