[BytesToGB]
Desc="Converts the given number of bytes to gigabytes."
SeeAlso=BytesToGBStr,BytesToKB,BytesToMB
Snip=295.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToGBStr]
Desc="Converts number of bytes Bytes to its string representation in gigabytes and returns the result. DecimalPlaces specifies the number of decimal places to be displayed and SeparateThousands indicates whether thousands are separated using the current locale's separator."
DescEx="<p>Converts number of bytes <var>Bytes</var> to its string representation in gigabytes and returns the result.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Depends=BytesToGB,FloatToFixed
SeeAlso=BytesToGB,BytesToKBStr,BytesToMBStr
Snip=296.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToKB]
Desc="Converts the given number of bytes to kilobytes."
SeeAlso=BytesToKBStr,BytesToMB,BytesToGB
Snip=297.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToKBStr]
Desc="Converts number of bytes Bytes to its string representation in kilobytes and returns the result. DecimalPlaces specifies the number of decimal places to be displayed and SeparateThousands indicates whether thousands are separated using the current locale's separator."
DescEx="<p>Converts number of bytes <var>Bytes</var> to its string representation in kilobytes and returns the result.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Depends=BytesToKB,FloatToFixed
SeeAlso=BytesToKB,BytesToMBStr,BytesToGBStr
Snip=298.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToMB]
Desc="Converts the given number of bytes to megabytes."
SeeAlso=BytesToMBStr,BytesToKB,BytesToGB
Snip=299.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToMBStr]
Desc="Converts number of bytes Bytes to its string representation in megabytes and returns the result. DecimalPlaces specifies the number of decimal places to be displayed and SeparateThousands indicates whether thousands are separated using the current locale's separator."
DescEx="<p>Converts number of bytes <var>Bytes</var> to its string representation in megabytes and returns the result.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Depends=BytesToMB,FloatToFixed
SeeAlso=BytesToMB,BytesToKBStr,BytesToGBStr
Snip=300.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Clamp]
Desc="Returns integer Value, adjusted so that it falls in the range [RangeLo..RangeHi], where RangeLo <= RangeHi."
DescEx="<p>Returns integer <var>Value</var>, adjusted so that it falls in the range <mono>[</mono><var>RangeLo</var><mono>..</mono><var>RangeHi</var><mono>]</mono>, where <var>RangeLo</var> <mono>&lt;=</mono> <var>RangeHi</var>.</p>"
Snip=336.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[CompilerVer]
Desc="Returns the version of the Delphi or Free Pascal compiler used to compile the program. 0.0 is returned on error, or if the compiler is not recognised."
DescEx="<p>Returns the version of the Delphi or Free Pascal compiler used to compile the program.</p><p>0.0 is returned on error, or if the compiler is not recognised.</p>"
Comments="For Delphi 2 to 5 the compiler version is calculated. From Delphi 6 on the compiler version is as reported by Delphi. For Free Pascal, major versions 1 & 2 are detected."
Snip=273.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[EndianSwap]
Desc="Swaps the given cardinal value between little endian and big endian format, and vica versa, and returns the result."
Credits="Contributed by Montor"
Snip=293.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ExchangeInt]
Desc="Exchanges the values of two given integers."
Snip=123.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FloatToFixed]
Desc="Formats floating point number Value as a fixed format string and returns it. DecimalPlaces specifies the number of decimal places to be displayed and SeparateThousands indicates whether thousands are separated using the current locale's separator."
DescEx="<p>Formats floating point number <var>Value</var> as a fixed format string and returns it.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Units=SysUtils
SeeAlso=IntToFixed,Int64ToFixed
Snip=252.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Int64ToFixed]
Desc="Converts 64 bit integer Value into its string representation and returns it. SeparateThousands determines whether thousands are to be separated using the current locale's separator."
DescEx="<p>Converts 64 bit integer <var>Value</var> into its string representation and returns it.</p><p><var>SeparateThousands</var> determines whether thousands are to be separated using the current locale's separator.</p>"
Depends=FloatToFixed
SeeAlso=FloatToFixed,IntToFixed
Snip=254.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToFixed]
Desc="Converts 32 bit integer Value into its string representation and returns it. SeparateThousands determines whether thousands are to be separated using the current locale's separator."
DescEx="<p>Converts 32 bit integer <var>Value</var> into its string representation and returns it.</p><p><var>SeparateThousands</var> determines whether thousands are to be separated using the current locale's separator.</p>"
Depends=FloatToFixed
SeeAlso=FloatToFixed,Int64ToFixed
Snip=253.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToNumberText]
Desc="Returns the English text representation of the given integer."
Credits="Adapted from code contributed by Bill Miller."
Units=SysUtils
SeeAlso=FloatToNumberText,IntToRoman
Snip=218.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToOctal]
Desc="Returns a string containing the octal value of integer Value. Digits indicates the minimum number of octal digits to return."
DescEx="Returns a string containing the octal value of integer <var>Value</var>. <var>Digits</var> indicates the minimum number of octal digits to return."
Depends=PadRight
Snip=255.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToRoman]
Desc="Converts non negative integer AValue into a string containing its roman numeral representation."
DescEx="Converts non negative integer <var>AValue</var> into a string containing its roman numeral representation."
Comments="For values greater than 4999 the output string can get very long and difficult to read."
Credits="Modified from code contributed by Michael Rockett."
SeeAlso=IntToNumberText
Snip=457.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsSubClassOf]
Desc="Checks if object instance AnInstance is a sub-class of, or the same class as, class AClass."
DescEx="Checks if object instance <var>AnInstance</var> is a sub-class of, or the same class as, class <var>AClass</var>."
Credits="Contributed by Rubem Nascimento da Rocha."
Snip=372.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Percentage]
Desc="Calculates and returns the value of A / B as a percentage, rounded to the nearest whole number. B must be non-zero."
DescEx="<p>Calculates and returns the value of <var>A</var> &#247; <var>B</var> as a percentage, rounded to the nearest whole number.</p><p><var>B</var> must be non-zero.</p>"
Credits="Modified from code contributed by Guru Kathiresan."
SeeAlso=PercentageStr
Snip=469.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PercentageStr]
Desc="Calculates and returns the value of A / B as a percentage string, rounded to the nearest whole number. B must be non-zero."
DescEx="<p>Calculates and returns the value of <var>A</var> &#247; <var>B</var> as a percentage string, rounded to the nearest whole number.</p><p><var>B</var> must be non-zero.</p>"
Credits="Contributed by Guru Kathiresan."
Units=SysUtils
Depends=Percentage
SeeAlso=Percentage
Snip=470.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReadBigEndianWord]
Desc="Reads and returns a word value from the given stream in big-endian format."
Units=Classes
Snip=219.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryStrToByte]
Desc="Attempts to convert string S into a Byte value. Returns True on success and sets B to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and B is not defined."
DescEx="<p>Attempts to convert string <var>S</var> into a <var>Byte</var> value.</p><p>Returns True on success and sets <var>B</var> to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and <var>B</var> is not defined.</p>"
Units=SysUtils
Depends=TryStrToWord
SeeAlso=TryStrToWord,TryStrToLongWord
Snip=154.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryStrToLongWord]
Desc="Attempts to convert string S into a LongWord value. Returns True on success and sets LW to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and LW is not defined."
DescEx="<p>Attempts to convert string <var>S</var> into a <var>LongWord</var> value.</p><p>Returns True on success and sets <var>LW</var> to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and <var>LW</var> is not defined.</p>"
Units=SysUtils
SeeAlso=TryStrToByte,TryStrToWord
Snip=152.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryStrToWord]
Desc="Attempts to convert string S into a Word value. Returns True on success and sets W to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and W is not defined."
DescEx="<p>Attempts to convert string <var>S</var> into a <var>Word</var> value.</p><p>Returns True on success and sets <var>W</var> to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and <var>W</var> is not defined.</p>"
Units=SysUtils
SeeAlso=TryStrToByte,TryStrToLongWord
Snip=153.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
