[BytesToGB]
Desc="Converts the given number of bytes to gigabytes."
SeeAlso=BytesToGBStr,BytesToKB,BytesToMB
Snip=295.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToGBStr]
DescEx="<p>Converts number of bytes <var>Bytes</var> to its string representation in gigabytes and returns the result.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Depends=BytesToGB,FloatToFixed
SeeAlso=BytesToGB,BytesToKBStr,BytesToMBStr
Snip=296.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToKB]
Desc="Converts the given number of bytes to kilobytes."
SeeAlso=BytesToKBStr,BytesToMB,BytesToGB
Snip=297.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToKBStr]
DescEx="<p>Converts number of bytes <var>Bytes</var> to its string representation in kilobytes and returns the result.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Depends=BytesToKB,FloatToFixed
SeeAlso=BytesToKB,BytesToMBStr,BytesToGBStr
Snip=298.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToMB]
Desc="Converts the given number of bytes to megabytes."
SeeAlso=BytesToMBStr,BytesToKB,BytesToGB
Snip=299.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[BytesToMBStr]
DescEx="<p>Converts number of bytes <var>Bytes</var> to its string representation in megabytes and returns the result.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Depends=BytesToMB,FloatToFixed
SeeAlso=BytesToMB,BytesToKBStr,BytesToGBStr
Snip=300.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Clamp]
DescEx="<p>Returns integer <var>Value</var>, adjusted so that it falls in the range <mono>[</mono><var>RangeLo</var><mono>..</mono><var>RangeHi</var><mono>]</mono>, where <var>RangeLo</var> <mono>&lt;=</mono> <var>RangeHi</var>.</p>"
Snip=336.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[CompilerVer]
DescEx="<p>Returns the version of the Delphi or Free Pascal compiler used to compile the program.</p><p>0.0 is returned on error, or if the compiler is not recognised.</p>"
Comments="For Delphi 2 to 5 the compiler version is calculated. From Delphi 6 on the compiler version is as reported by Delphi. For Free Pascal, major versions 1 & 2 are detected."
Snip=273.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[EndianSwap]
Desc="Swaps the given cardinal value between little endian and big endian format, and vica versa, and returns the result."
Credits="Contributed by Montor"
Snip=293.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ExchangeInt]
Desc="Exchanges the values of two given integers."
Snip=123.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FloatToFixed]
DescEx="<p>Formats floating point number <var>Value</var> as a fixed format string and returns it.</p><p><var>DecimalPlaces</var> specifies the number of decimal places to be displayed and <var>SeparateThousands</var> indicates whether thousands are separated using the current locale's separator.</p>"
Units=SysUtils
SeeAlso=IntToFixed,Int64ToFixed
Snip=252.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Int64ToFixed]
DescEx="<p>Converts 64 bit integer <var>Value</var> into its string representation and returns it.</p><p><var>SeparateThousands</var> determines whether thousands are to be separated using the current locale's separator.</p>"
Depends=FloatToFixed
SeeAlso=FloatToFixed,IntToFixed
Snip=254.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToFixed]
DescEx="<p>Converts 32 bit integer <var>Value</var> into its string representation and returns it.</p><p><var>SeparateThousands</var> determines whether thousands are to be separated using the current locale's separator.</p>"
Depends=FloatToFixed
SeeAlso=FloatToFixed,Int64ToFixed
Snip=253.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToNumberText]
Desc="Returns the English text representation of the given integer."
Credits="Adapted from code contributed by Bill Miller."
Units=SysUtils
SeeAlso=FloatToNumberText,IntToRoman
Snip=218.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToOctal]
DescEx="Returns a string containing the octal value of integer <var>Value</var>. <var>Digits</var> indicates the minimum number of octal digits to return."
Depends=PadRight
Snip=255.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToRoman]
DescEx="Converts non negative integer <var>AValue</var> into a string containing its roman numeral representation."
Comments="For values greater than 4999 the output string can get very long and difficult to read."
Credits="Modified from code contributed by Michael Rockett."
SeeAlso=IntToNumberText
Snip=457.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsSubClassOf]
DescEx="Checks if object instance <var>AnInstance</var> is a sub-class of, or the same class as, class <var>AClass</var>."
Credits="Contributed by Rubem Nascimento da Rocha."
Snip=372.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Percentage]
DescEx="<p>Calculates and returns the value of <var>A</var> &#247; <var>B</var> as a percentage, rounded to the nearest whole number.</p><p><var>B</var> must be non-zero.</p>"
Credits="Modified from code contributed by Guru Kathiresan."
SeeAlso=PercentageStr
Snip=469.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[PercentageStr]
DescEx="<p>Calculates and returns the value of <var>A</var> &#247; <var>B</var> as a percentage string, rounded to the nearest whole number.</p><p><var>B</var> must be non-zero.</p>"
Credits="Contributed by Guru Kathiresan."
Units=SysUtils
Depends=Percentage
SeeAlso=Percentage
Snip=470.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ReadBigEndianWord]
Desc="Reads and returns a word value from the given stream in big-endian format."
Units=Classes
Snip=219.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryStrToByte]
DescEx="<p>Attempts to convert string <var>S</var> into a <var>Byte</var> value.</p><p>Returns True on success and sets <var>B</var> to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and <var>B</var> is not defined.</p>"
Units=SysUtils
Depends=TryStrToWord
SeeAlso=TryStrToWord,TryStrToLongWord
Snip=154.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryStrToLongWord]
DescEx="<p>Attempts to convert string <var>S</var> into a <var>LongWord</var> value.</p><p>Returns True on success and sets <var>LW</var> to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and <var>LW</var> is not defined.</p>"
Units=SysUtils
SeeAlso=TryStrToByte,TryStrToWord
Snip=152.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[TryStrToWord]
DescEx="<p>Attempts to convert string <var>S</var> into a <var>Word</var> value.</p><p>Returns True on success and sets <var>W</var> to the converted value. If the string contains non-numeric characters, or the converted value is out of range, False is returned and <var>W</var> is not defined.</p>"
Units=SysUtils
SeeAlso=TryStrToByte,TryStrToLongWord
Snip=153.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=Q
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

# from utils.3.ini

[CheckBDEInstalled]
Desc="Checks if the BDE is installed."
Extra="<p>For alternative approaches see <a href="http://www.delphidabbler.com/tips/28">Tip #28</a>, &quot;How to check if the BDE is installed&quot;, on <a href="http://www.delphidabbler.com/">DelphiDabbler.com</a>.</p><p><warning>Warning:</warning> Some editions of Delphi (e.g. Delphi 6 personal) do not provide the <mono>BDE</mono> unit, and so the routine will not compile on them.</p><p>Contributed by mdeltas.</p>"
Units=BDE
Snip=256.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=N
FPC=N

[EnglishColorName]
DescEx="<p>Returns the name of the given <var>TColor</var> value in American English. If the name of the colour is not known then the colour number in hex is returned.</p><p>If <var>AConvertSysColors</var> is False and <var>AColor</var> is a system colour, then the name of the system colour is returned. When True, the name of the colour used to represent the system colour is returned. If <var>AColor</var> is not a system colour then <var>AConvertSysColors</var> has no effect.</p>"
Extra="<p>Modified from code contributed by Bill Miller.</p><p>Hex numbers are prefixed by <mono>'$'</mono> when compiled with Delphi or Free Pascal or <mono>'0x'</mono> if compiled with C++ Builder.</p>"
Units=Graphics,StrUtils
Snip=567.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[Exchange_Byte]
DisplayName="Exchange (Byte overload)"
Desc="Exchanges the values of two given unsigned 8 bit integers."
SeeAlso=Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=459.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Int64]
DisplayName="Exchange (Int64 overload)"
Desc="Exchanges the values of two given signed 64 bit integers."
SeeAlso=Exchange_Byte,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=460.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Longint]
DisplayName="Exchange (Longint overload)"
Desc="Exchanges the values of two given signed 32 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word,ExchangeInt.
Snip=461.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Longword]
DisplayName="Exchange (Longword overload)"
Desc="Exchanges the values of two given unsigned 32 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=462.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Shortint]
DisplayName="Exchange (Shortint overload)"
Desc="Exchanges the values of two given signed 8 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Smallint,Exchange_UInt64,Exchange_Word
Snip=463.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Smallint]
DisplayName="Exchange (Smallint overload)"
Desc="Exchanges the values of two given signed 16 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_UInt64,Exchange_Word
Snip=464.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_UInt64]
DisplayName="Exchange (UInt64 overload)"
Desc="Exchanges the values of two given unsigned 64 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_Word
Snip=465.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=N
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[Exchange_Word]
DisplayName="Exchange (Word overload)"
Desc="Exchanges the values of two given unsigned 16 bit integers."
SeeAlso=Exchange_Byte,Exchange_Int64,Exchange_Longint,Exchange_Longword,Exchange_Shortint,Exchange_Smallint,Exchange_UInt64
Snip=466.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FloatToNumberText]
DescEx="<p>Returns the English text representation of floating point value <var>ANumber</var>.</p><p><var>APrecision</var> determines the number of decimal places to include in the returned string.</p>"
Extra="<p>Users of Delphi XE &amp; later or Free Pascal 2.6.0 &amp; later should use <var>FloatToNumberTextXE</var> instead of this routine.</p><p>Adapted from code contributed by Bill Miller.</p>"
Units=SysUtils
Depends=IntToNumberText
SeeAlso=IntToNumberText,FloatToNumberTextXE
Snip=217.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=N
DelphiXE4=N
DelphiXE5=N
DelphiXE6=N
DelphiXE7=N
DelphiXE8=N
Delphi10S=N
FPC=Y

[FloatToNumberTextXE]
DescEx="<p>Returns the English text representation of floating point value <var>ANumber</var>.</p><p><var>APrecision</var> determines the number of decimal places to include in the returned string.</p>"
Extra="<p>This is a version of <var>FloatToNumberText</var> suitable for use with Delphi XE &amp; later or Free Pascal 2.6.0 &amp; later. For Delphi 2010 and earlier, use <var>FloatToNumberText</var> instead.</p><p>Adapted from code contributed by Bill Miller.</p>"
Units=SysUtils
Depends=IntToNumberText
SeeAlso=IntToNumberText,FloatToNumberText
Snip=556.dat
Delphi2=N
Delphi3=N
Delphi4=N
Delphi5=N
Delphi6=N
Delphi7=N
Delphi2005Win32=N
Delphi2006Win32=N
Delphi2007=N
Delphi2009Win32=N
Delphi2010=N
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FormInstanceCount_A]
DisplayName="FormInstanceCount (class type overload)"
DescEx="Counts and returns the current number of form instances that have, or descend from, class <var>AFormClass</var>."
Extra="<p>Contributed by Rubem Nascimento da Rocha.</p>"
Units=Forms
SeeAlso=FormInstanceCount_B
Snip=338.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[FormInstanceCount_B]
DisplayName="FormInstanceCount (class name overload)"
DescEx="Counts and returns the current number of form instances that have class name <var>AFormClassName</var>."
Extra="<p>Contributed by Rubem Nascimento da Rocha.</p> <p>Requires an exact match of class name. Descendant classes are excluded.</p>"
Units=Forms
SeeAlso=FormInstanceCount_A
Snip=339.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=N

[FractionToStr]
Desc="Converts a fraction expressed as a numerator and denominator to a string."
Extra="<p>From Bill Miller's snippets collection.</p>"
Units=SysUtils
SeeAlso=FractionToStrEx,NormaliseFractionSign
Snip=557.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FractionToStrEx]
DescEx="<p>Converts a fraction expressed as a numerator and denominator to a string. If <var>Normalise</var> is True the sign of the fraction is normalised before conversion.</p>"
Extra="<p>Inspired by code from Bill Miller's snippets collection.</p>"
Units=SysUtils
Depends=NormaliseFractionSign
SeeAlso=FractionToStr,NormaliseFractionSign
Snip=558.dat
Delphi2=N
Delphi3=N
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[FreeStringsObjects]
DescEx="<p>Frees all objects stored in the <var>Objects[]</var> property of the given string list.</p>"
Extra="<p>Based on code from the article <a href="http://delphi.about.com/od/delphitips2009/qt/free-strings-objects.htm">Freeing Objects in Delphi's TStrings Items</a> on About.com.</p><p><strong>Note:</strong> From Delphi 2009 <var>TStringList</var> has an overloaded constructor that takes an <var>OwnsObjects</var> parameter that, when True, frees the objects in <var>Objects[]</var> when the string list is destroyed.</p>"
Units=Classes
Snip=534.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToBinary_Int32]
DisplayName="IntToBinary (Integer overload)"
DescEx="<p>Returns a string containing the binary value of 32 bit signed integer <var>Value</var>. <var>Digits</var> indicates the minimum number of binary digits to return.</p>"
Depends=PadRight
SeeAlso=IntToOctal,IntToBinary_Int64
Snip=624.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IntToBinary_Int64]
DisplayName="IntToBinary (Int64 overload)"
DescEx="<p>Returns a string containing the binary value of 64 bit signed integer <var>Value</var>. <var>Digits</var> indicates the minimum number of binary digits to return.</p>"
Depends=IntToBinary_Int32
SeeAlso=IntToOctal,IntToBinary_Int32
Units=SysUtils
Snip=625.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsCharInSet]
DescEx="Checks if character <var>Ch</var> is in the set of characters <var>Chars</var>."
Extra="<p>This routine works correctly with Unicode and non-Unicode versions of Delphi.</p>"
Units=SysUtils
Depends=TCharSet
Snip=251.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[IsFlagSet]
DescEx="Checks if the bit flags given by <var>Flags</var> are set in bitmask <var>Mask</var>."
Extra="<p><var>Flags</var> may contain one or more bit flags. <var>IsFlagSet</var> returns True only if <em>all</em> the bit flags in <var>Flags</var> are set in <var>Mask</var>.</p>"
Snip=212.dat
Delphi2=Y
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[ProgIDInstalled]
Desc="Checks if the given program identifier is known to the system, i.e. is installed."
Extra="<p><strong>Example:</strong> <mono><strong>if</strong> ProgIdInstalled('InternetExplorer.Application') <strong>then</strong> ...</mono></p><p>Contributed by Michael Rockett.</p>"
Units=ActiveX
Snip=331.dat
Delphi2=N
Delphi3=Y
Delphi4=Y
Delphi5=Y
Delphi6=Y
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y

[VariantIsObject]
DescEx="<p>Checks if a the variant <var>V</var> contains an object.</p>"
Extra="<p>The parameter can be of type <var>Variant</var> or <var>OleVariant</var>.</p><p>It is possible a value judged to be an object could be set to <strong>nil</strong>. It is up the caller to check for this.</p><p>Adapted from code contributed by Bill Miller.</p>"
Units=Variants
Snip=622.dat
Delphi7=Y
Delphi2005Win32=Y
Delphi2006Win32=Y
Delphi2007=Y
Delphi2009Win32=Y
Delphi2010=Y
DelphiXE=Y
DelphiXE2=Y
DelphiXE3=Y
DelphiXE4=Y
Delphi10S=Y
FPC=Y
